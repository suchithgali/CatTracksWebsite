<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tester_8py_source" xml:lang="en-US">
<title>tester.py</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_tester_8py_source_1l00001"/><link linkend="_namespacetester_1aaccb9dff0d9481dceaffc98f77918b9a">00001</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetester_1aaccb9dff0d9481dceaffc98f77918b9a">simple_calculator</link>(expression):
<anchor xml:id="_tester_8py_source_1l00002"/>00002 &#32;&#32;&#32;list_expression&#32;=&#32;list(expression)
<anchor xml:id="_tester_8py_source_1l00003"/>00003 &#32;&#32;&#32;print(list_expression)
<anchor xml:id="_tester_8py_source_1l00004"/>00004 &#32;&#32;&#32;int_list_expression&#32;=&#32;[]
<anchor xml:id="_tester_8py_source_1l00005"/>00005 &#32;&#32;&#32;i&#32;=&#32;0
<anchor xml:id="_tester_8py_source_1l00006"/>00006 &#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;i&#32;&lt;&#32;len(list_expression):
<anchor xml:id="_tester_8py_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;combined_digit&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
<anchor xml:id="_tester_8py_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;list_expression[i].isdigit()&#32;<emphasis role="keywordflow">and</emphasis>&#32;i&#32;&lt;&#32;len(list_expression):
<anchor xml:id="_tester_8py_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;combined_digit&#32;+=&#32;list_expression[i]
<anchor xml:id="_tester_8py_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i+=&#32;1
<anchor xml:id="_tester_8py_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;int_list_expression.append(int(combined_digit))
<anchor xml:id="_tester_8py_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;list_expression[i]&#32;==&#32;<emphasis role="stringliteral">&apos;+&apos;</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;list_expression[i]&#32;==&#32;<emphasis role="stringliteral">&apos;-&apos;</emphasis>:
<anchor xml:id="_tester_8py_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_list_expression.append(list_expression[i])
<anchor xml:id="_tester_8py_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i+=&#32;1
<anchor xml:id="_tester_8py_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;final&#32;=&#32;int_list_expression[0]
<anchor xml:id="_tester_8py_source_1l00016"/>00016 &#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(int_list_expression)&#32;-&#32;1):
<anchor xml:id="_tester_8py_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;int_list_expression[i]&#32;==&#32;<emphasis role="stringliteral">&apos;+&apos;</emphasis>:
<anchor xml:id="_tester_8py_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final&#32;+=&#32;int_list_expression[i&#32;+&#32;1]
<anchor xml:id="_tester_8py_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;int_list_expression[i]&#32;==&#32;<emphasis role="stringliteral">&apos;-&apos;</emphasis>:
<anchor xml:id="_tester_8py_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final&#32;-=&#32;int_list_expression[i&#32;+&#32;1]
<anchor xml:id="_tester_8py_source_1l00021"/>00021 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;final
<anchor xml:id="_tester_8py_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_tester_8py_source_1l00023"/>00023 print(<link linkend="_namespacetester_1aaccb9dff0d9481dceaffc98f77918b9a">simple_calculator</link>(<emphasis role="stringliteral">&quot;655+5+7&quot;</emphasis>))
</programlisting></section>
