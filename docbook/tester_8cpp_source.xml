<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tester_8cpp_source" xml:lang="en-US">
<title>tester.cpp</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_tester_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_tester_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__array_list_8h">ArrayList.h</link>&quot;</emphasis>
<anchor xml:id="_tester_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stops__data_8h">stops_data.h</link>&quot;</emphasis>
<anchor xml:id="_tester_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;cpr/cpr.h&gt;</emphasis>
<anchor xml:id="_tester_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;nlohmann/json.hpp&gt;</emphasis>
<anchor xml:id="_tester_8cpp_source_1l00006"/>00006 
<anchor xml:id="_tester_8cpp_source_1l00007"/>00007 <emphasis role="keyword">using&#32;</emphasis><link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;=&#32;nlohmann::json;
<anchor xml:id="_tester_8cpp_source_1l00008"/>00008 
<anchor xml:id="_tester_8cpp_source_1l00009"/><link linkend="_tester_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">00009</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_tester_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">apiCalls</link>(std::string&#32;point1,&#32;std::string&#32;point2,&#32;std::string&#32;point3){
<anchor xml:id="_tester_8cpp_source_1l00010"/>00010 std::vector&lt;std::vector&lt;float&gt;&gt;&#32;coordinates1;
<anchor xml:id="_tester_8cpp_source_1l00011"/>00011 <emphasis role="keywordtype">float</emphasis>&#32;distanceMiles;
<anchor xml:id="_tester_8cpp_source_1l00012"/>00012 &#32;&#32;cpr::Response&#32;point1_call&#32;=&#32;cpr::Get(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</emphasis>},
<anchor xml:id="_tester_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Parameters{{<emphasis role="stringliteral">&quot;text&quot;</emphasis>,&#32;point1}},
<anchor xml:id="_tester_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Header{{<emphasis role="stringliteral">&quot;Authorization&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>}}
<anchor xml:id="_tester_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_tester_8cpp_source_1l00016"/>00016 
<anchor xml:id="_tester_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse&#32;=&#32;json::parse(point1_call.text);
<anchor xml:id="_tester_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features&#32;=&#32;jsonResponse[<emphasis role="stringliteral">&quot;features&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features){
<anchor xml:id="_tester_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;coords&#32;=&#32;feature[<emphasis role="stringliteral">&quot;geometry&quot;</emphasis>][<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lon&#32;=&#32;coords[0];
<anchor xml:id="_tester_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lat&#32;=&#32;coords[1];
<anchor xml:id="_tester_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coordinates1.push_back({lon,&#32;lat});
<anchor xml:id="_tester_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="_tester_8cpp_source_1l00026"/>00026 
<anchor xml:id="_tester_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;cpr::Response&#32;point2_call&#32;=&#32;cpr::Get(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</emphasis>},
<anchor xml:id="_tester_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Parameters{{<emphasis role="stringliteral">&quot;text&quot;</emphasis>,&#32;point2}},
<anchor xml:id="_tester_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Header{{<emphasis role="stringliteral">&quot;Authorization&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>}}
<anchor xml:id="_tester_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_tester_8cpp_source_1l00031"/>00031 
<anchor xml:id="_tester_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse2&#32;=&#32;json::parse(point2_call.text);
<anchor xml:id="_tester_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features2&#32;=&#32;jsonResponse2[<emphasis role="stringliteral">&quot;features&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features2){
<anchor xml:id="_tester_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;coords2&#32;=&#32;feature[<emphasis role="stringliteral">&quot;geometry&quot;</emphasis>][<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lon&#32;=&#32;coords2[0];
<anchor xml:id="_tester_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lat&#32;=&#32;coords2[1];
<anchor xml:id="_tester_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coordinates1.push_back({lon,&#32;lat});
<anchor xml:id="_tester_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="_tester_8cpp_source_1l00041"/>00041 
<anchor xml:id="_tester_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;cpr::Response&#32;point3_call&#32;=&#32;cpr::Get(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</emphasis>},
<anchor xml:id="_tester_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Parameters{{<emphasis role="stringliteral">&quot;text&quot;</emphasis>,&#32;point3}},
<anchor xml:id="_tester_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Header{{<emphasis role="stringliteral">&quot;Authorization&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>}}
<anchor xml:id="_tester_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_tester_8cpp_source_1l00046"/>00046 
<anchor xml:id="_tester_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse3&#32;=&#32;json::parse(point3_call.text);
<anchor xml:id="_tester_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features3&#32;=&#32;jsonResponse3[<emphasis role="stringliteral">&quot;features&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features3){
<anchor xml:id="_tester_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;coords3&#32;=&#32;feature[<emphasis role="stringliteral">&quot;geometry&quot;</emphasis>][<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lon&#32;=&#32;coords3[0];
<anchor xml:id="_tester_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lat&#32;=&#32;coords3[1];
<anchor xml:id="_tester_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coordinates1.push_back({lon,&#32;lat});
<anchor xml:id="_tester_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_tester_8cpp_source_1l00056"/>00056 
<anchor xml:id="_tester_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;requestBody;
<anchor xml:id="_tester_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;requestBody[<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>]&#32;=&#32;coordinates1;
<anchor xml:id="_tester_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;requestBody.dump(2);</emphasis>
<anchor xml:id="_tester_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;cpr::Response&#32;firstSegment&#32;=&#32;cpr::Post(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/v2/directions/driving-car&quot;</emphasis>},
<anchor xml:id="_tester_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Header{{<emphasis role="stringliteral">&quot;Authorization&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;Content-Type&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;application/json&quot;</emphasis>}},
<anchor xml:id="_tester_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Body{requestBody.dump()}
<anchor xml:id="_tester_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_tester_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse4&#32;=&#32;json::parse(firstSegment.text);
<anchor xml:id="_tester_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features4&#32;=&#32;jsonResponse4[<emphasis role="stringliteral">&quot;routes&quot;</emphasis>];
<anchor xml:id="_tester_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features4){
<anchor xml:id="_tester_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distanceMeters&#32;=&#32;feature[<emphasis role="stringliteral">&quot;summary&quot;</emphasis>][<emphasis role="stringliteral">&quot;distance&quot;</emphasis>].get&lt;<emphasis role="keywordtype">float</emphasis>&gt;();
<anchor xml:id="_tester_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distanceMiles&#32;=&#32;distanceMeters&#32;/&#32;1609;
<anchor xml:id="_tester_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_tester_8cpp_source_1l00071"/>00071 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;distanceMiles;
<anchor xml:id="_tester_8cpp_source_1l00072"/>00072 }
<anchor xml:id="_tester_8cpp_source_1l00073"/>00073 
<anchor xml:id="_tester_8cpp_source_1l00074"/><link linkend="_tester_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00074</link> <emphasis role="keywordtype">int</emphasis>&#32;&#32;<link linkend="_tester_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>(){
<anchor xml:id="_tester_8cpp_source_1l00075"/>00075 
<anchor xml:id="_tester_8cpp_source_1l00076"/>00076 std::string&#32;point1&#32;=&#32;<emphasis role="stringliteral">&quot;3304,&#32;Santa&#32;Rosa&#32;Court,&#32;Merced,&#32;Merced&#32;County,&#32;California,&#32;95348,&#32;United&#32;States&quot;</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00077"/>00077 std::string&#32;point2&#32;=&#32;<emphasis role="stringliteral">&quot;355&#32;West&#32;24th&#32;Street,&#32;Merced,&#32;CA&quot;</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00078"/>00078 std::string&#32;point3&#32;=&#32;<emphasis role="stringliteral">&quot;3706&#32;El&#32;Redondo&#32;Drive&quot;</emphasis>;
<anchor xml:id="_tester_8cpp_source_1l00079"/>00079 
<anchor xml:id="_tester_8cpp_source_1l00080"/>00080 std::cout&#32;&lt;&lt;&#32;<link linkend="_tester_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">apiCalls</link>(point1,&#32;point2,&#32;point3)&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_tester_8cpp_source_1l00081"/>00081 std::cout&#32;&lt;&lt;&#32;<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(<emphasis role="stringliteral">&quot;Amtrak&#32;Station&quot;</emphasis>);
<anchor xml:id="_tester_8cpp_source_1l00082"/>00082 
<anchor xml:id="_tester_8cpp_source_1l00083"/>00083 }
</programlisting></section>
