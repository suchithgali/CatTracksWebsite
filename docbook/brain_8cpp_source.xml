<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_brain_8cpp_source" xml:lang="en-US">
<title>brain.cpp</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_brain_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stops__data_8h">stops_data.h</link>&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__array_list_8h">ArrayList.h</link>&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;unordered_set&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__hash_table_8h">HashTable.h</link>&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00009"/>00009 
<anchor xml:id="_brain_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;cpr/cpr.h&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;nlohmann/json.hpp&gt;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00012"/>00012 
<anchor xml:id="_brain_8cpp_source_1l00013"/><link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">00013</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;=&#32;nlohmann::json;
<anchor xml:id="_brain_8cpp_source_1l00014"/>00014 
<anchor xml:id="_brain_8cpp_source_1l00015"/>00015 <emphasis role="comment">//holds&#32;an&#32;object&#32;of&#32;type&#32;time&#32;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00016"/><link linkend="_brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd">00016</link> <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd">timeLA</link>&#32;=&#32;std::chrono::system_clock::now();
<anchor xml:id="_brain_8cpp_source_1l00017"/>00017 <emphasis role="comment">//coverts&#32;the&#32;time&#32;object&#32;to&#32;a&#32;printable&#32;type</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00018"/><link linkend="_brain_8cpp_1a8307e4bf36c4646673e073621c4f9ccf">00018</link> std::time_t&#32;<link linkend="_brain_8cpp_1a8307e4bf36c4646673e073621c4f9ccf">timeT</link>&#32;=&#32;std::chrono::system_clock::to_time_t(<link linkend="_brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd">timeLA</link>);
<anchor xml:id="_brain_8cpp_source_1l00019"/>00019 
<anchor xml:id="_brain_8cpp_source_1l00020"/><link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">00020</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00021"/>00021 
<anchor xml:id="_brain_8cpp_source_1l00022"/><link linkend="_brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">00022</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</link>(<emphasis role="stringliteral">&quot;nameBus&quot;</emphasis>,9);
<anchor xml:id="_brain_8cpp_source_1l00023"/><link linkend="_brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">00023</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</link>(<emphasis role="stringliteral">&quot;possiblebuses&quot;</emphasis>,&#32;9);
<anchor xml:id="_brain_8cpp_source_1l00024"/><link linkend="_brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36">00024</link> <link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36">possible_busnames</link>;
<anchor xml:id="_brain_8cpp_source_1l00025"/><link linkend="_brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">00025</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">possible_distances</link>(<emphasis role="stringliteral">&quot;possibledistances&quot;</emphasis>,&#32;9);
<anchor xml:id="_brain_8cpp_source_1l00026"/><link linkend="_brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7">00026</link> <link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7">shortest_stops</link>;
<anchor xml:id="_brain_8cpp_source_1l00027"/><link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">00027</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</link>(<emphasis role="stringliteral">&quot;busGostops&quot;</emphasis>,&#32;9);
<anchor xml:id="_brain_8cpp_source_1l00028"/><link linkend="_brain_8cpp_1a73757c103b1d5b822641a143032b3693">00028</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1a73757c103b1d5b822641a143032b3693">distances_dict</link>(<emphasis role="stringliteral">&quot;distancesdict&quot;</emphasis>,&#32;9);
<anchor xml:id="_brain_8cpp_source_1l00029"/><link linkend="_brain_8cpp_1a9c3ac25e594dc612910249813aa7dced">00029</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1a9c3ac25e594dc612910249813aa7dced">shortestnames_stops</link>(<emphasis role="stringliteral">&quot;shortestnames_stops&quot;</emphasis>,&#32;9);
<anchor xml:id="_brain_8cpp_source_1l00030"/><link linkend="_brain_8cpp_1a6dfb5807da3afa5d183f5c6b73a6070e">00030</link> <link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1a6dfb5807da3afa5d183f5c6b73a6070e">distances_list</link>;
<anchor xml:id="_brain_8cpp_source_1l00031"/><link linkend="_brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71">00031</link> <link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&#32;<link linkend="_brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71">named_stops</link>(<emphasis role="stringliteral">&quot;named_stops&quot;</emphasis>,&#32;9);
<anchor xml:id="_brain_8cpp_source_1l00032"/>00032 
<anchor xml:id="_brain_8cpp_source_1l00033"/>00033 
<anchor xml:id="_brain_8cpp_source_1l00034"/><link linkend="_brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f">00034</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f">validatePlace</link>(<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;list,&#32;std::string&#32;target,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;end){
<anchor xml:id="_brain_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(start&#32;&lt;=&#32;end){
<anchor xml:id="_brain_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;middle&#32;=&#32;start&#32;+&#32;(end&#32;-&#32;start)&#32;/&#32;2;
<anchor xml:id="_brain_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list[middle]&#32;==&#32;target){
<anchor xml:id="_brain_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list[middle]&#32;&gt;&#32;target){
<anchor xml:id="_brain_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end&#32;=&#32;middle&#32;-&#32;1;
<anchor xml:id="_brain_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_brain_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;middle&#32;+&#32;1;
<anchor xml:id="_brain_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00048"/>00048 }
<anchor xml:id="_brain_8cpp_source_1l00049"/>00049 
<anchor xml:id="_brain_8cpp_source_1l00050"/>00050 
<anchor xml:id="_brain_8cpp_source_1l00051"/><link linkend="_brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac">00051</link> std::string&#32;<link linkend="_brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac">Hash_binary_search</link>(<link linkend="_class_hash_table">HashTable&lt;std::string&gt;</link>&amp;&#32;table,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;target){
<anchor xml:id="_brain_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(table.<link linkend="_class_hash_table_1a334c472f741326880069131e6e250d04">getBuckets</link>()&#32;==&#32;0){
<anchor xml:id="_brain_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;empty&#32;case&#32;as&#32;needed</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;HashTable&#32;is&#32;empty&quot;</emphasis>);
<anchor xml:id="_brain_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00056"/>00056 &#32;&#32;<emphasis role="comment">//ArrayList&lt;std::string&gt;&#32;sorted_names;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00057"/>00057 &#32;&#32;<emphasis role="comment">//sorted_names.insertionSort(bus_names);</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00058"/>00058 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;low&#32;=&#32;0;
<anchor xml:id="_brain_8cpp_source_1l00059"/>00059 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;high&#32;=&#32;table.<link linkend="_class_hash_table_1a696a2532b2a73abc2a2135e57d138906">getKeys</link>().<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>()&#32;-&#32;1;
<anchor xml:id="_brain_8cpp_source_1l00060"/>00060 
<anchor xml:id="_brain_8cpp_source_1l00061"/>00061 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(low&#32;&lt;=&#32;high){
<anchor xml:id="_brain_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;middle&#32;=&#32;(low&#32;+&#32;high)&#32;/&#32;2;
<anchor xml:id="_brain_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;keys&#32;=&#32;table.<link linkend="_class_hash_table_1a696a2532b2a73abc2a2135e57d138906">getKeys</link>();
<anchor xml:id="_brain_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;std::string&#32;value&#32;=&#32;keys[middle];
<anchor xml:id="_brain_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&lt;&#32;target){
<anchor xml:id="_brain_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;low&#32;=&#32;middle&#32;+&#32;1;
<anchor xml:id="_brain_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&gt;&#32;target){
<anchor xml:id="_brain_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;high&#32;=&#32;middle&#32;-&#32;1;
<anchor xml:id="_brain_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_brain_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;table.<link linkend="_class_hash_table_1a012d6d29d5afe9756a310bdff563aa9f">search</link>(value);
<anchor xml:id="_brain_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00074"/>00074 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00075"/>00075 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00076"/>00076 }
<anchor xml:id="_brain_8cpp_source_1l00077"/>00077 
<anchor xml:id="_brain_8cpp_source_1l00078"/><link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">00078</link> std::string&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>;
<anchor xml:id="_brain_8cpp_source_1l00079"/><link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">00079</link> std::string&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>;
<anchor xml:id="_brain_8cpp_source_1l00080"/>00080 
<anchor xml:id="_brain_8cpp_source_1l00081"/><link linkend="_brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0">00081</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0">findBusTaken</link>(){
<anchor xml:id="_brain_8cpp_source_1l00082"/>00082 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tables&#32;:&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>){
<anchor xml:id="_brain_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac">Hash_binary_search</link>(tables,&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>)&#32;==&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>){
<anchor xml:id="_brain_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</link>.appendTable(<link linkend="_brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</link>.HashStrings(<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>),&#32;tables.getName(),&#32;tables);
<anchor xml:id="_brain_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00086"/>00086 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00087"/>00087 }
<anchor xml:id="_brain_8cpp_source_1l00088"/>00088 
<anchor xml:id="_brain_8cpp_source_1l00089"/><link linkend="_brain_8cpp_1a92439386422a137302195241eb828238">00089</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_brain_8cpp_1a92439386422a137302195241eb828238">busGoStops</link>(){
<anchor xml:id="_brain_8cpp_source_1l00090"/>00090 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tables&#32;:&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>){
<anchor xml:id="_brain_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac">Hash_binary_search</link>(tables,&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>)&#32;==&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>){
<anchor xml:id="_brain_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</link>.appendTable(<link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</link>.HashStrings(<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>),&#32;tables.getName(),&#32;tables);
<anchor xml:id="_brain_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00094"/>00094 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00095"/>00095 }
<anchor xml:id="_brain_8cpp_source_1l00096"/>00096 
<anchor xml:id="_brain_8cpp_source_1l00097"/><link linkend="_brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">00097</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">apiCalls</link>(std::string&#32;point1,&#32;std::string&#32;point2,&#32;std::string&#32;point3){
<anchor xml:id="_brain_8cpp_source_1l00098"/>00098 &#32;&#32;std::vector&lt;std::vector&lt;float&gt;&gt;&#32;coordinates1;
<anchor xml:id="_brain_8cpp_source_1l00099"/>00099 &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distanceMiles;
<anchor xml:id="_brain_8cpp_source_1l00100"/>00100 &#32;&#32;cpr::Response&#32;point1_call&#32;=&#32;cpr::Get(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</emphasis>},
<anchor xml:id="_brain_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Parameters{{<emphasis role="stringliteral">&quot;text&quot;</emphasis>,&#32;point1},&#32;{<emphasis role="stringliteral">&quot;api_key&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>}}
<anchor xml:id="_brain_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_brain_8cpp_source_1l00103"/>00103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(point1_call.status_code&#32;!=&#32;200){
<anchor xml:id="_brain_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;API&#32;call&#32;for&#32;point1&#32;failed&#32;with&#32;status:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(point1_call.status_code));
<anchor xml:id="_brain_8cpp_source_1l00105"/>00105 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00106"/>00106 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse&#32;=&#32;json::parse(point1_call.text);
<anchor xml:id="_brain_8cpp_source_1l00107"/>00107 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features&#32;=&#32;jsonResponse[<emphasis role="stringliteral">&quot;features&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00108"/>00108 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features){
<anchor xml:id="_brain_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;coords&#32;=&#32;feature[<emphasis role="stringliteral">&quot;geometry&quot;</emphasis>][<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lon&#32;=&#32;coords[0];
<anchor xml:id="_brain_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lat&#32;=&#32;coords[1];
<anchor xml:id="_brain_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;coordinates1.push_back({lon,&#32;lat});
<anchor xml:id="_brain_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00115"/>00115 
<anchor xml:id="_brain_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;cpr::Response&#32;point2_call&#32;=&#32;cpr::Get(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</emphasis>},
<anchor xml:id="_brain_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Parameters{{<emphasis role="stringliteral">&quot;text&quot;</emphasis>,&#32;point2},&#32;{<emphasis role="stringliteral">&quot;api_key&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>}}
<anchor xml:id="_brain_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_brain_8cpp_source_1l00119"/>00119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(point2_call.status_code&#32;!=&#32;200){
<anchor xml:id="_brain_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;API&#32;call&#32;for&#32;point2&#32;failed&#32;with&#32;status:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(point2_call.status_code));
<anchor xml:id="_brain_8cpp_source_1l00121"/>00121 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00122"/>00122 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse2&#32;=&#32;json::parse(point2_call.text);
<anchor xml:id="_brain_8cpp_source_1l00123"/>00123 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features2&#32;=&#32;jsonResponse2[<emphasis role="stringliteral">&quot;features&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00124"/>00124 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features2){
<anchor xml:id="_brain_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;coords2&#32;=&#32;feature[<emphasis role="stringliteral">&quot;geometry&quot;</emphasis>][<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lon&#32;=&#32;coords2[0];
<anchor xml:id="_brain_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lat&#32;=&#32;coords2[1];
<anchor xml:id="_brain_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;coordinates1.push_back({lon,&#32;lat});
<anchor xml:id="_brain_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00130"/>00130 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00131"/>00131 
<anchor xml:id="_brain_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;cpr::Response&#32;point3_call&#32;=&#32;cpr::Get(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</emphasis>},
<anchor xml:id="_brain_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Parameters{{<emphasis role="stringliteral">&quot;text&quot;</emphasis>,&#32;point3},&#32;{<emphasis role="stringliteral">&quot;api_key&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>}}
<anchor xml:id="_brain_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_brain_8cpp_source_1l00135"/>00135 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(point3_call.status_code&#32;!=&#32;200){
<anchor xml:id="_brain_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;API&#32;call&#32;for&#32;point3&#32;failed&#32;with&#32;status:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(point3_call.status_code));
<anchor xml:id="_brain_8cpp_source_1l00137"/>00137 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00138"/>00138 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse3&#32;=&#32;json::parse(point3_call.text);
<anchor xml:id="_brain_8cpp_source_1l00139"/>00139 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features3&#32;=&#32;jsonResponse3[<emphasis role="stringliteral">&quot;features&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00140"/>00140 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features3){
<anchor xml:id="_brain_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;coords3&#32;=&#32;feature[<emphasis role="stringliteral">&quot;geometry&quot;</emphasis>][<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lon&#32;=&#32;coords3[0];
<anchor xml:id="_brain_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;lat&#32;=&#32;coords3[1];
<anchor xml:id="_brain_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;coordinates1.push_back({lon,&#32;lat});
<anchor xml:id="_brain_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00146"/>00146 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00147"/>00147 
<anchor xml:id="_brain_8cpp_source_1l00148"/>00148 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;requestBody;
<anchor xml:id="_brain_8cpp_source_1l00149"/>00149 &#32;&#32;requestBody[<emphasis role="stringliteral">&quot;coordinates&quot;</emphasis>]&#32;=&#32;coordinates1;
<anchor xml:id="_brain_8cpp_source_1l00150"/>00150 &#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;requestBody.dump(2);</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00151"/>00151 &#32;&#32;cpr::Response&#32;firstSegment&#32;=&#32;cpr::Post(cpr::Url{<emphasis role="stringliteral">&quot;https://api.openrouteservice.org/v2/directions/driving-car&quot;</emphasis>},
<anchor xml:id="_brain_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Header{{<emphasis role="stringliteral">&quot;Authorization&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;Content-Type&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;application/json&quot;</emphasis>}},
<anchor xml:id="_brain_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpr::Body{requestBody.dump()}
<anchor xml:id="_brain_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_brain_8cpp_source_1l00155"/>00155 
<anchor xml:id="_brain_8cpp_source_1l00156"/>00156 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(firstSegment.status_code&#32;!=&#32;200){
<anchor xml:id="_brain_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;API&#32;call&#32;for&#32;point4&#32;failed&#32;with&#32;status:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(firstSegment.status_code));
<anchor xml:id="_brain_8cpp_source_1l00158"/>00158 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00159"/>00159 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;jsonResponse4&#32;=&#32;json::parse(firstSegment.text);
<anchor xml:id="_brain_8cpp_source_1l00160"/>00160 &#32;&#32;<link linkend="_brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d">json</link>&#32;features4&#32;=&#32;jsonResponse4[<emphasis role="stringliteral">&quot;routes&quot;</emphasis>];
<anchor xml:id="_brain_8cpp_source_1l00161"/>00161 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;feature&#32;:&#32;features4){
<anchor xml:id="_brain_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distanceMeters&#32;=&#32;feature[<emphasis role="stringliteral">&quot;summary&quot;</emphasis>][<emphasis role="stringliteral">&quot;distance&quot;</emphasis>].get&lt;<emphasis role="keywordtype">float</emphasis>&gt;();
<anchor xml:id="_brain_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;distanceMiles&#32;=&#32;distanceMeters&#32;/&#32;1609;
<anchor xml:id="_brain_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00166"/>00166 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;distanceMiles;
<anchor xml:id="_brain_8cpp_source_1l00167"/>00167 }
<anchor xml:id="_brain_8cpp_source_1l00168"/>00168 
<anchor xml:id="_brain_8cpp_source_1l00169"/>00169 <emphasis role="comment">//need&#32;to&#32;search&#32;for&#32;q1&#32;in&#32;all&#32;the&#32;bus&#32;hashtables</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00170"/>00170 <emphasis role="comment">//save&#32;the&#32;names&#32;of&#32;all&#32;the&#32;buses&#32;in&#32;an&#32;array</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00171"/>00171 <emphasis role="comment">//check&#32;if&#32;q2&#32;is&#32;in&#32;any&#32;of&#32;the&#32;buses&#32;that&#32;were&#32;saved&#32;in&#32;the&#32;array</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00172"/>00172 <emphasis role="comment">//if&#32;it&#32;is&#32;return&#32;that&#32;the&#32;user&#32;should&#32;take&#32;any&#32;of&#32;those&#32;buses</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00173"/>00173 
<anchor xml:id="_brain_8cpp_source_1l00174"/><link linkend="_brain_8cpp_1a843260ff92ac53db80f16e606e63840b">00174</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_brain_8cpp_1a843260ff92ac53db80f16e606e63840b">findbustoTake</link>(){
<anchor xml:id="_brain_8cpp_source_1l00175"/>00175 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;HashTable&lt;std::string&gt;</link>&gt;&#32;q1Buses;
<anchor xml:id="_brain_8cpp_source_1l00176"/>00176 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;HashTable&lt;std::string&gt;</link>&gt;&#32;commonBuses;
<anchor xml:id="_brain_8cpp_source_1l00177"/>00177 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>.getsize();&#32;i++){
<anchor xml:id="_brain_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;route&#32;:&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>[i].getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(route&#32;==&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>){
<anchor xml:id="_brain_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q1Buses.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>[i]);
<anchor xml:id="_brain_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00183"/>00183 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00184"/>00184 
<anchor xml:id="_brain_8cpp_source_1l00185"/>00185 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;q1Buses.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>();&#32;j++){
<anchor xml:id="_brain_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;route2&#32;:&#32;q1Buses[j].getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(route2&#32;==&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>){
<anchor xml:id="_brain_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commonBuses.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(q1Buses[j]);
<anchor xml:id="_brain_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00191"/>00191 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00192"/>00192 
<anchor xml:id="_brain_8cpp_source_1l00193"/>00193 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;To&#32;go&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;take&#32;any&#32;of&#32;these&#32;buses:&#32;&quot;</emphasis>;&#32;
<anchor xml:id="_brain_8cpp_source_1l00194"/>00194 &#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00195"/>00195 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;commonBuses.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>();&#32;i++){
<anchor xml:id="_brain_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;commonBuses[i].getName();&#32;
<anchor xml:id="_brain_8cpp_source_1l00197"/>00197 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00198"/>00198 &#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00199"/>00199 &#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_brain_8cpp_source_1l00200"/>00200 
<anchor xml:id="_brain_8cpp_source_1l00201"/>00201 }
<anchor xml:id="_brain_8cpp_source_1l00202"/>00202 
<anchor xml:id="_brain_8cpp_source_1l00203"/><link linkend="_brain_8cpp_1a4a8de83f900529830fe73b019e7a0633">00203</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_brain_8cpp_1a4a8de83f900529830fe73b019e7a0633">findBusSimilar</link>(){
<anchor xml:id="_brain_8cpp_source_1l00204"/>00204 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;HashTable&lt;std::string&gt;</link>&gt;&#32;q1Buses;
<anchor xml:id="_brain_8cpp_source_1l00205"/>00205 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;HashTable&lt;std::string&gt;</link>&gt;&#32;q2Buses;
<anchor xml:id="_brain_8cpp_source_1l00206"/>00206 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;commonBuses;
<anchor xml:id="_brain_8cpp_source_1l00207"/>00207 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;commonQ2Buses;
<anchor xml:id="_brain_8cpp_source_1l00208"/>00208 &#32;&#32;std::unordered_set&lt;int&gt;&#32;commonQ2BusIndices;&#32;
<anchor xml:id="_brain_8cpp_source_1l00209"/>00209 &#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00210"/>00210 &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distance;
<anchor xml:id="_brain_8cpp_source_1l00211"/>00211 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;float&gt;</link>&#32;distances;
<anchor xml:id="_brain_8cpp_source_1l00212"/>00212 &#32;&#32;<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;commonStops;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;--&#32;Added&#32;to&#32;store&#32;matching&#32;stop&#32;names</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00213"/>00213 
<anchor xml:id="_brain_8cpp_source_1l00214"/>00214 &#32;&#32;std::unordered_set&lt;std::string&gt;&#32;visitedStops;
<anchor xml:id="_brain_8cpp_source_1l00215"/>00215 
<anchor xml:id="_brain_8cpp_source_1l00216"/>00216 &#32;&#32;std::string&#32;geoQ1&#32;=&#32;<link linkend="_stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc">geo_places</link>[<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>)];
<anchor xml:id="_brain_8cpp_source_1l00217"/>00217 &#32;&#32;std::string&#32;geoQ2&#32;=&#32;<link linkend="_stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc">geo_places</link>[<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>)];
<anchor xml:id="_brain_8cpp_source_1l00218"/>00218 
<anchor xml:id="_brain_8cpp_source_1l00219"/>00219 &#32;&#32;<emphasis role="comment">//&#32;Single&#32;loop&#32;to&#32;collect&#32;q1&#32;and&#32;q2&#32;buses</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00220"/>00220 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>.getsize();&#32;i++){
<anchor xml:id="_brain_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;addQ1&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;addQ2&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;keys&#32;=&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>[i].getKeys();
<anchor xml:id="_brain_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;route&#32;:&#32;keys){
<anchor xml:id="_brain_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(route&#32;==&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>){
<anchor xml:id="_brain_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addQ1&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(route&#32;==&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>){
<anchor xml:id="_brain_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addQ2&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addQ1&#32;&amp;&amp;&#32;addQ2){
<anchor xml:id="_brain_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addQ1){
<anchor xml:id="_brain_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;q1Buses.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>[i]);
<anchor xml:id="_brain_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addQ2){
<anchor xml:id="_brain_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;q2Buses.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>[i]);
<anchor xml:id="_brain_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00241"/>00241 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00242"/>00242 
<anchor xml:id="_brain_8cpp_source_1l00243"/>00243 &#32;&#32;<emphasis role="comment">//&#32;Collect&#32;all&#32;stops&#32;from&#32;q2Buses&#32;into&#32;an&#32;unordered_set</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00244"/>00244 &#32;&#32;std::unordered_set&lt;std::string&gt;&#32;q2AllStops;
<anchor xml:id="_brain_8cpp_source_1l00245"/>00245 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;l&#32;=&#32;0;&#32;l&#32;&lt;&#32;q2Buses.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>();&#32;l++){
<anchor xml:id="_brain_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;gostop&#32;:&#32;q2Buses[l].getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q2AllStops.insert(gostop);
<anchor xml:id="_brain_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00249"/>00249 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00250"/>00250 
<anchor xml:id="_brain_8cpp_source_1l00251"/>00251 &#32;&#32;<emphasis role="comment">//&#32;Then&#32;iterate&#32;over&#32;q1Buses&#32;and&#32;check&#32;membership&#32;in&#32;q2AllStops</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00252"/>00252 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;q1Buses.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>();&#32;k++){
<anchor xml:id="_brain_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stops&#32;=&#32;q1Buses[k].getKeys();
<anchor xml:id="_brain_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;stop&#32;:&#32;stops){
<anchor xml:id="_brain_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(visitedStops.find(stop)&#32;!=&#32;visitedStops.end())&#32;{
<anchor xml:id="_brain_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;
<anchor xml:id="_brain_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visitedStops.insert(stop);
<anchor xml:id="_brain_8cpp_source_1l00259"/>00259 
<anchor xml:id="_brain_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;stop&#32;exists&#32;in&#32;q2AllStops,&#32;record&#32;it&#32;along&#32;with&#32;the&#32;corresponding&#32;bus</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(q2AllStops.find(stop)&#32;!=&#32;q2AllStops.end()){
<anchor xml:id="_brain_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(<link linkend="_brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">apiCalls</link>(geoQ1,&#32;<link linkend="_stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc">geo_places</link>[<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(stop)],&#32;geoQ2));
<anchor xml:id="_brain_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commonBuses.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(q1Buses[k].getName());
<anchor xml:id="_brain_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commonStops.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(stop);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;--&#32;Record&#32;the&#32;common&#32;stop&#32;name</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00265"/>00265 
<anchor xml:id="_brain_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;q2Buses.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>();&#32;j++){
<anchor xml:id="_brain_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;q2Keys&#32;=&#32;q2Buses[j].getKeys();
<anchor xml:id="_brain_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;current&#32;q2&#32;bus&#32;has&#32;the&#32;common&#32;stop.</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::find(q2Keys.begin(),&#32;q2Keys.end(),&#32;stop)&#32;!=&#32;q2Keys.end()){
<anchor xml:id="_brain_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;we&#32;add&#32;the&#32;bus&#32;only&#32;once.</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(commonQ2BusIndices.find(j)&#32;==&#32;commonQ2BusIndices.end()){
<anchor xml:id="_brain_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commonQ2Buses.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(q2Buses[j].getName());
<anchor xml:id="_brain_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commonQ2BusIndices.insert(j);
<anchor xml:id="_brain_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00279"/>00279 &#32;&#32;}&#32;
<anchor xml:id="_brain_8cpp_source_1l00280"/>00280 
<anchor xml:id="_brain_8cpp_source_1l00281"/>00281 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;To&#32;go&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;take&#32;any&#32;of&#32;these&#32;buses:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;commonQ2Buses&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00282"/>00282 
<anchor xml:id="_brain_8cpp_source_1l00283"/>00283 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(distances.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>()&#32;&gt;&#32;0){
<anchor xml:id="_brain_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minDistance&#32;=&#32;distances[0];
<anchor xml:id="_brain_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minIndex&#32;=&#32;0;
<anchor xml:id="_brain_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;1;&#32;j&#32;&lt;&#32;distances.<link linkend="_class_array_list_1a063667aea4d7d7c5967608d3c9e7d475">getsize</link>();&#32;j++){
<anchor xml:id="_brain_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(distances[j]&#32;&lt;&#32;minDistance){
<anchor xml:id="_brain_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minDistance&#32;=&#32;distances[j];
<anchor xml:id="_brain_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minIndex&#32;=&#32;j;
<anchor xml:id="_brain_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;minBus&#32;=&#32;commonBuses[minIndex];
<anchor xml:id="_brain_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;minStop&#32;=&#32;commonStops[minIndex];
<anchor xml:id="_brain_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;minStop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;then&#32;take&#32;any&#32;of&#32;these&#32;buses:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;commonBuses&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>;
<anchor xml:id="_brain_8cpp_source_1l00295"/>00295 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00296"/>00296 
<anchor xml:id="_brain_8cpp_source_1l00297"/>00297 &#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_brain_8cpp_source_1l00298"/>00298 }
<anchor xml:id="_brain_8cpp_source_1l00299"/>00299 
<anchor xml:id="_brain_8cpp_source_1l00300"/>00300 
<anchor xml:id="_brain_8cpp_source_1l00301"/><link linkend="_brain_8cpp_1a29b369f1fea7a4921c4248610e67935b">00301</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_brain_8cpp_1a29b369f1fea7a4921c4248610e67935b">findBusGo</link>(){
<anchor xml:id="_brain_8cpp_source_1l00302"/>00302 &#32;&#32;std::string&#32;point1_name;
<anchor xml:id="_brain_8cpp_source_1l00303"/>00303 &#32;&#32;std::string&#32;point2_name;
<anchor xml:id="_brain_8cpp_source_1l00304"/>00304 &#32;&#32;std::string&#32;point3_name;
<anchor xml:id="_brain_8cpp_source_1l00305"/>00305 &#32;&#32;std::string&#32;takenBusStop;
<anchor xml:id="_brain_8cpp_source_1l00306"/>00306 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Entered\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00307"/>00307 &#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00308"/>00308 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;name&#32;:&#32;<link linkend="_brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</link>.getKeys()){&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;buses&#32;=&#32;<link linkend="_brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</link>.getValues(name);
<anchor xml:id="_brain_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;bus&#32;:&#32;buses){
<anchor xml:id="_brain_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Entered\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;stops&#32;:&#32;bus.getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Entered&#32;third&#32;for:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;stops&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;takenBusStop&#32;=&#32;stops;
<anchor xml:id="_brain_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;name1&#32;:&#32;<link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</link>.getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Entered&#32;fourth&#32;for:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;name1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;buses2&#32;=&#32;<link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</link>.getValues(name1);
<anchor xml:id="_brain_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Number&#32;of&#32;buses2&#32;for&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;name1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;buses2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;bus2&#32;:&#32;buses2){
<anchor xml:id="_brain_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Entered&#32;fifth&#32;for\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;j3&#32;:&#32;bus2.getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Checking&#32;j3:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;j3&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac">Hash_binary_search</link>(<link linkend="_brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</link>,&#32;takenBusStop)&#32;==&#32;j3){
<anchor xml:id="_brain_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point1_name&#32;=&#32;<link linkend="_stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc">geo_places</link>[<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>)];
<anchor xml:id="_brain_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point2_name&#32;=&#32;<link linkend="_stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc">geo_places</link>[<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>)];
<anchor xml:id="_brain_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point3_name&#32;=&#32;<link linkend="_stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc">geo_places</link>[<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.index(takenBusStop)];
<anchor xml:id="_brain_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;possible_distancesKeys;
<anchor xml:id="_brain_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;possible_distancesKeys.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(j3);
<anchor xml:id="_brain_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">possible_distances</link>.appendHashes(possible_distancesKeys,&#32;<link linkend="_brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4">apiCalls</link>(point1_name,&#32;point2_name,&#32;point3_name));
<anchor xml:id="_brain_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36">possible_busnames</link>.append(name);
<anchor xml:id="_brain_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7">shortest_stops</link>.append(j3);
<anchor xml:id="_brain_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</link>.appendHashes(j3,&#32;name1);&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00347"/>00347 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00348"/>00348 }
<anchor xml:id="_brain_8cpp_source_1l00349"/>00349 
<anchor xml:id="_brain_8cpp_source_1l00350"/><link linkend="_brain_8cpp_1a95d1dbab111395e55c015259450d66ab">00350</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_brain_8cpp_1a95d1dbab111395e55c015259450d66ab">findShortestBus</link>(){
<anchor xml:id="_brain_8cpp_source_1l00351"/>00351 &#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00352"/>00352 &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;min_distance&#32;=&#32;<link linkend="_brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">possible_distances</link>.getMinValue();
<anchor xml:id="_brain_8cpp_source_1l00353"/>00353 &#32;&#32;std::string&#32;min_stop&#32;=&#32;<link linkend="_brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">possible_distances</link>.searchforKey(min_distance);
<anchor xml:id="_brain_8cpp_source_1l00354"/>00354 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;stop&#32;:&#32;<link linkend="_brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</link>.getKeys()){
<anchor xml:id="_brain_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;<link linkend="_class_array_list">ArrayList&lt;std::string&gt;</link>&#32;min_bus;
<anchor xml:id="_brain_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac">Hash_binary_search</link>(<link linkend="_brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</link>,&#32;min_stop)&#32;==&#32;stop){
<anchor xml:id="_brain_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;min_bus.<link linkend="_class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66">append</link>(<link linkend="_brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</link>.search(stop));
<anchor xml:id="_brain_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;
<anchor xml:id="_brain_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;}&#32;&#32;
<anchor xml:id="_brain_8cpp_source_1l00360"/>00360 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00361"/>00361 }
<anchor xml:id="_brain_8cpp_source_1l00362"/>00362 
<anchor xml:id="_brain_8cpp_source_1l00363"/><link linkend="_brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00363</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>(){
<anchor xml:id="_brain_8cpp_source_1l00364"/>00364 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Where&#32;would&#32;you&#32;like&#32;to&#32;go?&#32;&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00365"/>00365 &#32;&#32;std::getline(std::cin,&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>);
<anchor xml:id="_brain_8cpp_source_1l00366"/>00366 &#32;&#32;<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;=&#32;<link linkend="_brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f">validatePlace</link>(<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>,&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>,&#32;0,&#32;<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.getsize()&#32;-&#32;1);
<anchor xml:id="_brain_8cpp_source_1l00367"/>00367 
<anchor xml:id="_brain_8cpp_source_1l00368"/>00368 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;==&#32;<emphasis role="keyword">false</emphasis>){
<anchor xml:id="_brain_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;==&#32;<emphasis role="keyword">false</emphasis>){
<anchor xml:id="_brain_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;location&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_brain_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Where&#32;would&#32;you&#32;like&#32;to&#32;go?:&#32;R&#32;Street&#32;Village&#32;Apts,&#32;El&#32;Redondo&#32;Dr,&#32;Compass&#32;Pointe&#32;Apts,&#32;Merced&#32;College&#32;The&#32;Bus&#32;Terminal,&#32;M&#32;St.&#32;At&#32;Bellevue&#32;RD,&#32;University&#32;Transit&#32;Center,&#32;Promenade&#32;Center,&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Merced&#32;Mall&#32;Target,&#32;Walmart&#32;on&#32;Loughborough&#32;Dr,&#32;Amtrak&#32;Station,&#32;K&#32;St.&#32;Between&#32;18th&#32;&amp;&#32;19th,&#32;Merced&#32;Transpo&#32;(REQ),&#32;Rite&#32;Aid/Walgreens&#32;on&#32;G&#32;St,&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;El&#32;Portal&#32;Plaza&#32;&amp;&#32;G&#32;Street,&#32;Granville&#32;Apartments,&#32;G&#32;St.&#32;&amp;&#32;W.&#32;Alexander&#32;Ave,&#32;El&#32;Portal&#32;&amp;&#32;G&#32;Street,&#32;Mercy&#32;Hospital/TriCollege,&#32;TriCollege/Mercy&#32;(Bus&#32;stop&#32;on&#32;G&#32;next&#32;to&#32;Tri&#32;College),&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;G&#32;St.&#32;&amp;&#32;W.&#32;Alexander&#32;Ave.&#32;(Bus&#32;Stop&#32;Paul&apos;s&#32;Place),&#32;Cardella&#32;Rd.&#32;&amp;&#32;M&#32;Street&#32;(North),&#32;Foothill&#32;Drive,&#32;Cardella&#32;Rd.&#32;&amp;&#32;M&#32;Street&#32;(South),&#32;G&#32;Street&#32;South&#32;Across&#32;from&#32;Raley&apos;s&#32;(The&#32;Bus&#32;Stop),&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;K&#32;St.&#32;Between&#32;18Th&#32;&amp;&#32;19th,&#32;Meadows&#32;Ave&#32;&amp;&#32;Olivewood&#32;Dr&#32;(Foodmaxx),&#32;Yosemite&#32;Crossings&#32;Shopping&#32;Center,&#32;M&#32;Street&#32;Village&#32;Apartments,&#32;Ironstone&#32;Dr.&#32;&amp;&#32;M&#32;St,&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Yosemite&#32;&amp;&#32;Cordova&#32;(Merced&#32;Physician&#32;Center),&#32;Moraga&#32;Subdivision,&#32;University&#32;Surgery&#32;Center,&#32;Cardella&#32;Rd.&#32;&amp;&#32;&apos;M&apos;&#32;Street,&#32;Cardella&#32;Rd.&#32;&amp;&#32;&apos;M&apos;&#32;Street,&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;K&#32;St.&#32;Between&#32;18th&#32;&amp;&#32;19th,&#32;UC&#32;Merced&#32;Downtown&#32;Campus&#32;Center,&#32;Merced&#32;Transpo,&#32;G&#32;Street&#32;South&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_brain_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;std::getline(std::cin,&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>);
<anchor xml:id="_brain_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;=&#32;<link linkend="_brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f">validatePlace</link>(<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>,&#32;<link linkend="_brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e">q1</link>,&#32;0,&#32;<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.getsize()&#32;-&#32;1);
<anchor xml:id="_brain_8cpp_source_1l00381"/>00381 }
<anchor xml:id="_brain_8cpp_source_1l00382"/>00382 <emphasis role="comment">/*def&#32;validateTime(input_time):</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00383"/>00383 <emphasis role="comment">&#32;&#32;&#32;&#32;global&#32;valid_time</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00384"/>00384 <emphasis role="comment">&#32;&#32;&#32;&#32;try:</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00385"/>00385 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parsed_time&#32;=&#32;datetime.strptime(input_time,&#32;&apos;%H:%M:%S&apos;)</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00386"/>00386 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;0&#32;&lt;=&#32;parsed_time.hour&#32;&lt;&#32;24&#32;and&#32;0&#32;&lt;=&#32;parsed_time.minute&#32;&lt;&#32;60&#32;and&#32;0&#32;&lt;=&#32;parsed_time.second&#32;&lt;&#32;60:</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00387"/>00387 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_time&#32;=&#32;True</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00388"/>00388 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else:</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00389"/>00389 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_time&#32;=&#32;False</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00390"/>00390 <emphasis role="comment">&#32;&#32;&#32;&#32;except&#32;ValueError:</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00391"/>00391 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_time&#32;=&#32;False</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00392"/>00392 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00393"/>00393 
<anchor xml:id="_brain_8cpp_source_1l00394"/>00394 std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Where&#32;are&#32;you&#32;currently&#32;located?:&#32;&quot;</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00395"/>00395 std::getline(std::cin,&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>);
<anchor xml:id="_brain_8cpp_source_1l00396"/>00396 <link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;=&#32;<link linkend="_brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f">validatePlace</link>(<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>,&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>,&#32;0,&#32;<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.getsize()&#32;-&#32;1);
<anchor xml:id="_brain_8cpp_source_1l00397"/>00397 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>){
<anchor xml:id="_brain_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;==&#32;<emphasis role="keyword">false</emphasis>){
<anchor xml:id="_brain_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;location&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_brain_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Where&#32;would&#32;you&#32;like&#32;to&#32;go?:&#32;R&#32;Street&#32;Village&#32;Apts,&#32;El&#32;Redondo&#32;Dr,&#32;Compass&#32;Pointe&#32;Apts,&#32;Merced&#32;College&#32;The&#32;Bus&#32;Terminal,&#32;M&#32;St.&#32;At&#32;Bellevue&#32;RD,&#32;University&#32;Transit&#32;Center,&#32;Promenade&#32;Center,&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Merced&#32;Mall&#32;Target,&#32;Walmart&#32;on&#32;Loughborough&#32;Dr,&#32;Amtrak&#32;Station,&#32;K&#32;St.&#32;Between&#32;18th&#32;&amp;&#32;19th,&#32;Merced&#32;Transpo&#32;(REQ),&#32;Rite&#32;Aid/Walgreens&#32;on&#32;G&#32;St,&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;El&#32;Portal&#32;Plaza&#32;&amp;&#32;G&#32;Street,&#32;Granville&#32;Apartments,&#32;G&#32;St.&#32;&amp;&#32;W.&#32;Alexander&#32;Ave,&#32;El&#32;Portal&#32;&amp;&#32;G&#32;Street,&#32;Mercy&#32;Hospital/TriCollege,&#32;TriCollege/Mercy&#32;(Bus&#32;stop&#32;on&#32;G&#32;next&#32;to&#32;Tri&#32;College),&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;G&#32;St.&#32;&amp;&#32;W.&#32;Alexander&#32;Ave.&#32;(Bus&#32;Stop&#32;Paul&apos;s&#32;Place),&#32;Cardella&#32;Rd.&#32;&amp;&#32;M&#32;Street&#32;(North),&#32;Foothill&#32;Drive,&#32;Cardella&#32;Rd.&#32;&amp;&#32;M&#32;Street&#32;(South),&#32;G&#32;Street&#32;South&#32;Across&#32;from&#32;Raley&apos;s&#32;(The&#32;Bus&#32;Stop),&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;K&#32;St.&#32;Between&#32;18Th&#32;&amp;&#32;19th,&#32;Meadows&#32;Ave&#32;&amp;&#32;Olivewood&#32;Dr&#32;(Foodmaxx),&#32;Yosemite&#32;Crossings&#32;Shopping&#32;Center,&#32;M&#32;Street&#32;Village&#32;Apartments,&#32;Ironstone&#32;Dr.&#32;&amp;&#32;M&#32;St,&#32;&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Yosemite&#32;&amp;&#32;Cordova&#32;(Merced&#32;Physician&#32;Center),&#32;Moraga&#32;Subdivision,&#32;University&#32;Surgery&#32;Center,&#32;Cardella&#32;Rd.&#32;&amp;&#32;&apos;M&apos;&#32;Street,&#32;Cardella&#32;Rd.&#32;&amp;&#32;&apos;M&apos;&#32;Street,&quot;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;K&#32;St.&#32;Between&#32;18th&#32;&amp;&#32;19th,&#32;UC&#32;Merced&#32;Downtown&#32;Campus&#32;Center,&#32;Merced&#32;Transpo,&#32;G&#32;Street&#32;South&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_brain_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::getline(std::cin,&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>);
<anchor xml:id="_brain_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065">placeFound</link>&#32;=&#32;<link linkend="_brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f">validatePlace</link>(<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>,&#32;<link linkend="_brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406">q2</link>,&#32;0,&#32;<link linkend="_stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f">places</link>.getsize()&#32;-&#32;1);
<anchor xml:id="_brain_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_brain_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_brain_8cpp_source_1l00411"/>00411 &#32;&#32;}
<anchor xml:id="_brain_8cpp_source_1l00412"/>00412 }
<anchor xml:id="_brain_8cpp_source_1l00413"/>00413 
<anchor xml:id="_brain_8cpp_source_1l00414"/>00414 <emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_stops__data_8h_1a38234e7466b4a71ae218866a4206a27e">bus_names</link>.getsize();&#32;i++){
<anchor xml:id="_brain_8cpp_source_1l00415"/>00415 &#32;&#32;<link linkend="_brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71">named_stops</link>.appendHashes(<link linkend="_stops__data_8h_1a38234e7466b4a71ae218866a4206a27e">bus_names</link>,&#32;<link linkend="_stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea">bus_stops_tables</link>[i]);
<anchor xml:id="_brain_8cpp_source_1l00416"/>00416 }
<anchor xml:id="_brain_8cpp_source_1l00417"/>00417 
<anchor xml:id="_brain_8cpp_source_1l00418"/>00418 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00419"/>00419 <emphasis role="comment">q3&#32;=&#32;input(&quot;What&#32;timeEl&#32;&#32;would&#32;you&#32;like&#32;to&#32;arrive&#32;by?&#32;Enter&#32;a&#32;time&#32;(Hour:Minute:Second&#32;format):&#32;&quot;)</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00420"/>00420 <emphasis role="comment">validateTime(q3)</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00421"/>00421 <emphasis role="comment">while&#32;True:</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00422"/>00422 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(valid_time&#32;==&#32;False):</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00423"/>00423 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q3&#32;=&#32;input(&quot;What&#32;time&#32;would&#32;you&#32;like&#32;to&#32;arrive&#32;by?&#32;Enter&#32;a&#32;time&#32;(Hour:Minute:Second&#32;format)&quot;)</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00424"/>00424 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateTime(q3)</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00425"/>00425 <emphasis role="comment">&#32;&#32;&#32;&#32;else:</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00426"/>00426 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00427"/>00427 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00428"/>00428 
<anchor xml:id="_brain_8cpp_source_1l00429"/>00429 <link linkend="_brain_8cpp_1a4a8de83f900529830fe73b019e7a0633">findBusSimilar</link>();
<anchor xml:id="_brain_8cpp_source_1l00430"/>00430 <emphasis role="comment">//findbustoTake();</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00431"/>00431 <emphasis role="comment">//busGoStops();</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00432"/>00432 <emphasis role="comment">//findBusGo();</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00433"/>00433 <emphasis role="comment">//findShortestBus();</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00434"/>00434 <emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;busGo_stops.getKeys()&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_brain_8cpp_source_1l00435"/>00435 <emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_brain_8cpp_source_1l00436"/>00436 }
</programlisting></section>
