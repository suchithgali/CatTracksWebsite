<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__binary_tree_8h_source" xml:lang="en-US">
<title>BinaryTree.h</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__binary_tree_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;BINARY_TREE</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;BINARY_TREE</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00003"/>00003 
<anchor xml:id="__binary_tree_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__array_list_8h">ArrayList.h</link>&quot;</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00007"/>00007 
<anchor xml:id="__binary_tree_8h_source_1l00008"/>00008 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<anchor xml:id="__binary_tree_8h_source_1l00009"/><link linkend="_struct_node">00009</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_node_1a2fa6968303ac7486cd1cbbadb793859b">Node</link>{
<anchor xml:id="__binary_tree_8h_source_1l00010"/><link linkend="_struct_node_1ac450c71a8677a38d306361f9ced518d3">00010</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_node_1ac450c71a8677a38d306361f9ced518d3">data</link>;
<anchor xml:id="__binary_tree_8h_source_1l00011"/><link linkend="_struct_node_1a6596c7ac17ecafff5522310c0da3a828">00011</link> &#32;&#32;&#32;&#32;<link linkend="_struct_node_1a2fa6968303ac7486cd1cbbadb793859b">Node</link>*&#32;<link linkend="_struct_node_1a6596c7ac17ecafff5522310c0da3a828">left</link>;
<anchor xml:id="__binary_tree_8h_source_1l00012"/><link linkend="_struct_node_1a4009a1138f2f04372037fbec63406f11">00012</link> &#32;&#32;&#32;&#32;<link linkend="_struct_node_1a2fa6968303ac7486cd1cbbadb793859b">Node</link>*&#32;<link linkend="_struct_node_1a4009a1138f2f04372037fbec63406f11">right</link>;
<anchor xml:id="__binary_tree_8h_source_1l00013"/>00013 
<anchor xml:id="__binary_tree_8h_source_1l00014"/>00014 
<anchor xml:id="__binary_tree_8h_source_1l00015"/><link linkend="_struct_node_1a2fa6968303ac7486cd1cbbadb793859b">00015</link> &#32;&#32;&#32;&#32;<link linkend="_struct_node_1a2fa6968303ac7486cd1cbbadb793859b">Node</link>(T&#32;val){
<anchor xml:id="__binary_tree_8h_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_node_1ac450c71a8677a38d306361f9ced518d3">data</link>&#32;=&#32;val;
<anchor xml:id="__binary_tree_8h_source_1l00017"/>00017 &#32;&#32;&#32;&#32;}
<anchor xml:id="__binary_tree_8h_source_1l00018"/>00018 };
<anchor xml:id="__binary_tree_8h_source_1l00019"/>00019 
<anchor xml:id="__binary_tree_8h_source_1l00020"/>00020 <emphasis role="comment">//creates&#32;a&#32;Binary&#32;Search&#32;Tree&#32;using&#32;a&#32;sorted&#32;ArrayList</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00021"/>00021 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<anchor xml:id="__binary_tree_8h_source_1l00022"/><link linkend="__binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327">00022</link> <link linkend="_struct_node">Node&lt;T&gt;</link>*&#32;<link linkend="__binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327">sorted_BST</link>(<link linkend="_class_array_list">ArrayList&lt;T&gt;</link>&amp;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;end){
<anchor xml:id="__binary_tree_8h_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&gt;&#32;end)&#32;{
<anchor xml:id="__binary_tree_8h_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="__binary_tree_8h_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mid&#32;=&#32;(start&#32;+&#32;end)&#32;/&#32;2;
<anchor xml:id="__binary_tree_8h_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<link linkend="_struct_node">Node&lt;T&gt;</link>*&#32;node&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_node">Node&lt;T&gt;</link>(list[mid]);
<anchor xml:id="__binary_tree_8h_source_1l00028"/>00028 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_struct_node_1a6596c7ac17ecafff5522310c0da3a828">left</link>&#32;=&#32;<link linkend="__binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327">sorted_BST</link>(list,&#32;start,&#32;mid&#32;-&#32;1);
<anchor xml:id="__binary_tree_8h_source_1l00029"/>00029 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_struct_node_1a4009a1138f2f04372037fbec63406f11">right</link>&#32;=&#32;<link linkend="__binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327">sorted_BST</link>(list,&#32;mid&#32;+&#32;1,&#32;end);
<anchor xml:id="__binary_tree_8h_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node;
<anchor xml:id="__binary_tree_8h_source_1l00031"/>00031 }
<anchor xml:id="__binary_tree_8h_source_1l00032"/>00032 
<anchor xml:id="__binary_tree_8h_source_1l00033"/>00033 <emphasis role="comment">//&#32;Prints&#32;the&#32;binary&#32;tree&#32;in&#32;a&#32;pretty&#32;way&#32;with&#32;branches</emphasis>
<anchor xml:id="__binary_tree_8h_source_1l00034"/>00034 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<anchor xml:id="__binary_tree_8h_source_1l00035"/><link linkend="__binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985">00035</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985">print_tree</link>(<link linkend="_struct_node">Node&lt;T&gt;</link>*&#32;root,&#32;std::string&#32;indent&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;last&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="__binary_tree_8h_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!root)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00037"/>00037 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;indent;
<anchor xml:id="__binary_tree_8h_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(last)&#32;{
<anchor xml:id="__binary_tree_8h_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;└──&#32;&quot;</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__binary_tree_8h_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;├──&#32;&quot;</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent&#32;+=&#32;<emphasis role="stringliteral">&quot;│&#32;&#32;&#32;&quot;</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="__binary_tree_8h_source_1l00045"/>00045 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;root-&gt;<link linkend="_struct_node_1ac450c71a8677a38d306361f9ced518d3">data</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__binary_tree_8h_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<link linkend="__binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985">print_tree</link>(root-&gt;<link linkend="_struct_node_1a6596c7ac17ecafff5522310c0da3a828">left</link>,&#32;indent,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__binary_tree_8h_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<link linkend="__binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985">print_tree</link>(root-&gt;<link linkend="_struct_node_1a4009a1138f2f04372037fbec63406f11">right</link>,&#32;indent,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__binary_tree_8h_source_1l00048"/>00048 }
<anchor xml:id="__binary_tree_8h_source_1l00049"/>00049 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<anchor xml:id="__binary_tree_8h_source_1l00050"/>00050 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985">print_tree</link>(<link linkend="_struct_node">Node&lt;T&gt;</link>*&#32;root,&#32;std::string&#32;indent&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;last&#32;=&#32;<emphasis role="keyword">true</emphasis>){
<anchor xml:id="__binary_tree_8h_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!root)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__binary_tree_8h_source_1l00052"/>00052 }
<anchor xml:id="__binary_tree_8h_source_1l00053"/>00053 
<anchor xml:id="__binary_tree_8h_source_1l00054"/>00054 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
