<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_hash_table_8h" kind="file" language="C++">
    <compoundname>HashTable.h</compoundname>
    <includes refid="_array_list_8h" local="yes">ArrayList.h</includes>
    <includes refid="_linked_list_8h" local="yes">LinkedList.h</includes>
    <includes local="no">string</includes>
    <includes local="no">list</includes>
    <includes local="no">ostream</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="brain_8cpp" local="yes">brain.cpp</includedby>
    <includedby refid="hastabletest_8cpp" local="yes">hastabletest.cpp</includedby>
    <includedby refid="stops__data_8h" local="yes">stops_data.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>ArrayList.h</label>
        <link refid="_array_list_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>HashTable.h</label>
        <link refid="_hash_table_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>LinkedList.h</label>
        <link refid="_linked_list_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>initializer_list</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>list</label>
      </node>
      <node id="6">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>typeinfo</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>HashTable.h</label>
        <link refid="_hash_table_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>brain.cpp</label>
        <link refid="brain_8cpp"/>
      </node>
      <node id="3">
        <label>hastabletest.cpp</label>
        <link refid="hastabletest_8cpp"/>
      </node>
      <node id="5">
        <label>stops_data.cpp</label>
        <link refid="stops__data_8cpp"/>
      </node>
      <node id="4">
        <label>stops_data.h</label>
        <link refid="stops__data_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>tester.cpp</label>
        <link refid="tester_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_hash_table" prot="public">HashTable</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="_hash_table_8h_1a8aff5ad6a6852fcfb7cbaa3936aad758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const HashTable&lt; T &gt; &amp;container)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; T &gt; &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HashTable.h" line="284" column="1" bodyfile="HashTable.h" bodystart="284" bodyend="301" declfile="HashTable.h" declline="17" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>HASH_TABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH_TABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_array_list_8h" kindref="compound">ArrayList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_linked_list_8h" kindref="compound">LinkedList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_hash_table_8h_1a8aff5ad6a6852fcfb7cbaa3936aad758" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_hash_table" kindref="compound">HashTable&lt;T&gt;</ref>&amp;<sp/>container);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="20" refid="class_hash_table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable</ref>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22" refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;</highlight></codeline>
<codeline lineno="23" refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="24" refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>LinkedList<sp/>objects<sp/>directly<sp/>instead<sp/>of<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;LinkedList&lt;std::list&lt;T&gt;</ref>&gt;&gt;<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="27" refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;LinkedList&lt;HashTable&lt;T&gt;</ref>&gt;&gt;<sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>;</highlight></codeline>
<codeline lineno="28" refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;LinkedList&lt;T&gt;</ref>&gt;<sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable</ref>()<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>(1),<sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>(),<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>(),<sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>(),<sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>bucket<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_hash_table_1a4a11963e508c404d4639910fe8642571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a4a11963e508c404d4639910fe8642571" kindref="member">HashTable</ref>(std::string<sp/><ref refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/><ref refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;buckets<sp/>=<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>.append(<ref refid="class_linked_list" kindref="compound">LinkedList&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.append(<ref refid="class_linked_list" kindref="compound">LinkedList</ref>&lt;std::list&lt;T&gt;&gt;());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>.append(<ref refid="class_linked_list" kindref="compound">LinkedList</ref>&lt;<ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&gt;());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>bus_keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_hash_table_1adf3873ac75e2ae9a37ac4cdce8bf95ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1adf3873ac75e2ae9a37ac4cdce8bf95ab" kindref="member">HashTable</ref>(std::string<sp/><ref refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" kindref="member">name</ref>,<sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;T&gt;</ref>&amp;<sp/>bus_keys){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;name<sp/>=<sp/><ref refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;buckets<sp/>=<sp/>bus_keys.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys[i]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.append(<ref refid="class_linked_list" kindref="compound">LinkedList</ref>&lt;std::list&lt;T&gt;&gt;());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>.append(<ref refid="class_linked_list" kindref="compound">LinkedList</ref>&lt;<ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&gt;());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>.append(<ref refid="class_linked_list" kindref="compound">LinkedList&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>Constructor<sp/>(Default<sp/>is<sp/>sufficient)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_hash_table_1a9975878c274ef8e36176b88629af2887" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a9975878c274ef8e36176b88629af2887" kindref="member">HashTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>Constructor<sp/>(Default<sp/>is<sp/>sufficient)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_hash_table_1a15f6fd855190aa4060743fa1a5ad1048" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a15f6fd855190aa4060743fa1a5ad1048" kindref="member">HashTable</ref>(<ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>Assignment<sp/>Operator<sp/>(Default<sp/>is<sp/>sufficient)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_hash_table_1aee63cca1c525d74f1dd700f4b43aec97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/><ref refid="class_hash_table_1aee63cca1c525d74f1dd700f4b43aec97" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>Assignment<sp/>Operator<sp/>(Default<sp/>is<sp/>sufficient)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_hash_table_1a5bf66782ede692e139142deb5e69274a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/><ref refid="class_hash_table_1a5bf66782ede692e139142deb5e69274a" kindref="member">operator=</ref>(<ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor<sp/>(Default<sp/>is<sp/>sufficient)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_hash_table_1ad34948fa4296cd12c5862903c12f4c55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1ad34948fa4296cd12c5862903c12f4c55" kindref="member">~HashTable</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator<sp/>Support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_hash_table_1ab820465daec6a4d1e7cde79891c9f880" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1ab820465daec6a4d1e7cde79891c9f880" kindref="member">begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[0];<sp/>}</highlight></codeline>
<codeline lineno="76" refid="class_hash_table_1a447d8ff47ebf2f6ab437e1be5d8b7f92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a447d8ff47ebf2f6ab437e1be5d8b7f92" kindref="member">end</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.end();<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hash<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_hash_table_1a7a5c66eeea34c1566638f1e7a64ab627" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a7a5c66eeea34c1566638f1e7a64ab627" kindref="member">HashInts</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>%<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>val)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;HashTable<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prime<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mod<sp/>=<sp/>1000000009;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>power<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>val){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lower<sp/>=<sp/>std::tolower(c);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>||<sp/>lower<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashValue<sp/>=<sp/>(hashValue<sp/>+<sp/>(c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>1)<sp/>*<sp/>power)<sp/>%<sp/>mod;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>=<sp/>(power<sp/>*<sp/>prime)<sp/>%<sp/>mod;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hashValue<sp/>%<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref><sp/>+<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>)<sp/>%<sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="class_hash_table_1a696a2532b2a73abc2a2135e57d138906" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/><ref refid="class_hash_table_1a696a2532b2a73abc2a2135e57d138906" kindref="member">getKeys</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="class_hash_table_1ac1b1e0ae3a193949b896f933a5090fe0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;LinkedList&lt;std::list&lt;T&gt;</ref>&gt;&gt;<sp/><ref refid="class_hash_table_1ac1b1e0ae3a193949b896f933a5090fe0" kindref="member">getValues</ref>(){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112" refid="class_hash_table_1a14225a6edd19b90b8e9ed55484c7766f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_linked_list" kindref="compound">LinkedList&lt;HashTable&lt;T&gt;</ref>&gt;<sp/><ref refid="class_hash_table_1a14225a6edd19b90b8e9ed55484c7766f" kindref="member">getValues</ref>(std::string<sp/>busname){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(busname);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>[index];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="class_hash_table_1a012d6d29d5afe9756a310bdff563aa9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_hash_table_1a012d6d29d5afe9756a310bdff563aa9f" kindref="member">search</ref>(std::string<sp/>val){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.index(val);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[index];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_hash_table_1aed30b3a5fcccdf2e1636e32dbf0996e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1aed30b3a5fcccdf2e1636e32dbf0996e3" kindref="member">searchforKeyIndex</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;HashTable<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize();<sp/>i++){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_linked_list" kindref="compound">LinkedList&lt;std::list&lt;T&gt;</ref>&gt;<sp/>bucket<sp/>=<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>bucket.<ref refid="class_linked_list_1a417e93e223b5e9f5a511cee4c56ac338" kindref="member">begin</ref>();<sp/>it<sp/>!=<sp/>bucket.<ref refid="class_linked_list_1abd13f8fef21c6b9a594a36e31d0f79ad" kindref="member">end</ref>();<sp/>++it){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>item<sp/>:<sp/>it){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first<sp/>||<sp/>item<sp/>==<sp/>val){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_hash_table_1a41e58d0ef84097a6ede10d7bdd2d84f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_hash_table_1a41e58d0ef84097a6ede10d7bdd2d84f3" kindref="member">searchforKey</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;HashTable<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...existing<sp/>code...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize();<sp/>i++){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_linked_list" kindref="compound">LinkedList&lt;std::list&lt;T&gt;</ref>&gt;<sp/>bucket<sp/>=<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>bucket.<ref refid="class_linked_list_1a417e93e223b5e9f5a511cee4c56ac338" kindref="member">begin</ref>();<sp/>it<sp/>!=<sp/>bucket.<ref refid="class_linked_list_1abd13f8fef21c6b9a594a36e31d0f79ad" kindref="member">end</ref>();<sp/>++it){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>item<sp/>:<sp/>*it){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::stof(item)<sp/>==<sp/>val){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>==<sp/>-1){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.getsize()){</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[index];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overloaded<sp/>Operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="class_hash_table_1ad585ca0ecf155ce37180596d9e4b1ac0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_hash_table_1ad585ca0ecf155ce37180596d9e4b1ac0" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="class_hash_table_1a7a5c66eeea34c1566638f1e7a64ab627" kindref="member">HashInts</ref>(key);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.getsize()){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Key<sp/>index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[index];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="class_hash_table_1a9cae17312252d0c048c266dfd7b14ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_hash_table_1a9cae17312252d0c048c266dfd7b14ee3" kindref="member">operator[]</ref>(std::string<sp/>key){</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(key);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.getsize()){</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Key<sp/>index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[index];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additional<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="class_hash_table_1a334c472f741326880069131e6e250d04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a334c472f741326880069131e6e250d04" kindref="member">getBuckets</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a3761b4f1a66408666d0fca9184303023" kindref="member">buckets</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="class_hash_table_1ad155e0413babe87efb83d94a8c4abaaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_hash_table_1ad155e0413babe87efb83d94a8c4abaaf" kindref="member">getName</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1ad53bacae6dae1507bb9bb9ac53158598" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="class_hash_table_1a78319df5357e26b81cfa732d9fd23967" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a78319df5357e26b81cfa732d9fd23967" kindref="member">getMinValue</ref>(){</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;HashTable<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>.getsize();<sp/>i++){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_linked_list" kindref="compound">LinkedList&lt;std::list&lt;T&gt;</ref>&gt;<sp/>bucket<sp/>=<sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>bucket.<ref refid="class_linked_list_1a417e93e223b5e9f5a511cee4c56ac338" kindref="member">begin</ref>();<sp/>it<sp/>!=<sp/>bucket.<ref refid="class_linked_list_1abd13f8fef21c6b9a594a36e31d0f79ad" kindref="member">end</ref>();<sp/>++it){</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>item<sp/>:<sp/>*it){</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first<sp/>||<sp/>std::stof(item)<sp/>&lt;<sp/>min){</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>std::stof(item);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="class_hash_table_1abf14fb1b8620c525979c1273ed8197e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1abf14fb1b8620c525979c1273ed8197e7" kindref="member">appendTable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hashCode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value,<sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/>values){</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(value);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>[hashCode].appendinLL(values);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="class_hash_table_1a19d70062202d74e388bd00ee3e60252c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a19d70062202d74e388bd00ee3e60252c" kindref="member">appendHashes</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;T&gt;</ref>&amp;<sp/>bus_keys,<sp/><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt;std::list&lt;T&gt;&gt;&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bus_keys.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(bus_keys[i]);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys[i]);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>[hash].appendinLL(values[i]);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_hash_table_1ab526b44388ca692ef94c4561c21e1ae9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1ab526b44388ca692ef94c4561c21e1ae9" kindref="member">appendHashes</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;T&gt;</ref>&amp;<sp/>bus_keys,<sp/><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt;<ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&gt;&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bus_keys.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(bus_keys[i]);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys[i]);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>[hash].appendinLL(values[i]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="class_hash_table_1ae398bb56ee52bc6c176977ea4366d517" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1ae398bb56ee52bc6c176977ea4366d517" kindref="member">appendHashes</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;T&gt;</ref>&amp;<sp/>bus_keys,<sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bus_keys.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(bus_keys[i]);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys[i]);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>[hash].appendinLL(values);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="class_hash_table_1a017abff6a21774cfc698883f383aba59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a017abff6a21774cfc698883f383aba59" kindref="member">appendHashes</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref>&amp;<sp/>bus_keys,<sp/>T<sp/>distances)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bus_keys.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys[i]);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(bus_keys[i]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>[hash].appendinLL(distances);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="class_hash_table_1a579bdf29d6361e749a091ca6b2f01111" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a579bdf29d6361e749a091ca6b2f01111" kindref="member">appendHashes</ref>(std::string<sp/>bus_keys,<sp/>std::string<sp/>busnames)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(bus_keys);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>[hash].appendinLL(busnames);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="class_hash_table_1a0c2f65372ae69ba7852b552238f5accd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1a0c2f65372ae69ba7852b552238f5accd" kindref="member">appendHashes</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref>&amp;<sp/>bus_keys,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distances)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bus_keys.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.append(bus_keys[i]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/><ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(bus_keys[i]);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>[hash].appendinLL(distances);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Friend<sp/>Declaration<sp/>for<sp/>Operator&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>&lt;&gt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_hash_table" kindref="compound">HashTable&lt;T&gt;</ref>&amp;<sp/>table);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Friend<sp/>function<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="284" refid="class_hash_table_1a3fdbe798fd18986e2af4bb41723be979" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_hash_table_8h_1a8aff5ad6a6852fcfb7cbaa3936aad758" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_hash_table_1aef9a69291686266a617009ace9bcb135" kindref="member">HashTable&lt;T&gt;</ref>&amp;<sp/>table){</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table.<ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++){</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>table.<ref refid="class_hash_table_1a2f9f1e739d8383b38d89fa2508d98a9c" kindref="member">HashStrings</ref>(table.<ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[i]);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>table.<ref refid="class_hash_table_1a5ae2a80028aa9f9ebf4ecab73596a112" kindref="member">keys</ref>[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(std::is_same&lt;T,<sp/>std::list&lt;typename<sp/>T::value_type&gt;&gt;::value){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>table.<ref refid="class_hash_table_1a8c27e577df26c95d566937bea18f4525" kindref="member">data</ref>[hash];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>HashTable&lt;typename<sp/>T::value_type&gt;&gt;::value){</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>table.<ref refid="class_hash_table_1a49468455f43c02eed6b75ca5ee16c9d5" kindref="member">dataTables</ref>[hash];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>table.<ref refid="class_hash_table_1a039c57adf89f0ef47e99165b152fe4dd" kindref="member">dataT</ref>[hash];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="HashTable.h"/>
  </compounddef>
</doxygen>
