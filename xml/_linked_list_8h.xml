<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_linked_list_8h" kind="file" language="C++">
    <compoundname>LinkedList.h</compoundname>
    <includes local="no">list</includes>
    <includes local="no">ostream</includes>
    <includes local="no">iostream</includes>
    <includedby refid="_array_list_8h" local="yes">ArrayList.h</includedby>
    <includedby refid="_hash_table_8h" local="yes">HashTable.h</includedby>
    <includedby refid="stops__data_8h" local="yes">stops_data.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>LinkedList.h</label>
        <link refid="_linked_list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>list</label>
      </node>
      <node id="3">
        <label>ostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>ArrayList.h</label>
        <link refid="_array_list_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>BinaryTree.h</label>
        <link refid="_binary_tree_8h"/>
      </node>
      <node id="4">
        <label>HashTable.h</label>
        <link refid="_hash_table_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>LinkedList.h</label>
        <link refid="_linked_list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>brain.cpp</label>
        <link refid="brain_8cpp"/>
      </node>
      <node id="6">
        <label>hastabletest.cpp</label>
        <link refid="hastabletest_8cpp"/>
      </node>
      <node id="8">
        <label>stops_data.cpp</label>
        <link refid="stops__data_8cpp"/>
      </node>
      <node id="7">
        <label>stops_data.h</label>
        <link refid="stops__data_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>tester.cpp</label>
        <link refid="tester_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_node" prot="public">Node</innerclass>
    <innerclass refid="class_linked_list" prot="public">LinkedList</innerclass>
    <innerclass refid="class_linked_list_1_1_iterator" prot="public">LinkedList::Iterator</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="_linked_list_8h_1a08ab48c8a731571a66b1849dcc9ee7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::list&lt; T &gt; &amp;lst)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::list&lt; T &gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LinkedList.h" line="9" column="1" bodyfile="LinkedList.h" bodystart="9" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="_linked_list_8h_1a7541894d5e762de069bf4768b7b83bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const LinkedList&lt; T &gt; &amp;container)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_linked_list" kindref="compound">LinkedList</ref>&lt; T &gt; &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LinkedList.h" line="133" column="1" bodyfile="LinkedList.h" bodystart="133" bodyend="143" declfile="LinkedList.h" declline="45" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LINKED_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINKED_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9" refid="_linked_list_8h_1a08ab48c8a731571a66b1849dcc9ee7d6" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_linked_list_8h_1a08ab48c8a731571a66b1849dcc9ee7d6" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;T&gt;&amp;<sp/>lst){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>lst.begin();<sp/>it<sp/>!=<sp/>lst.end();<sp/>++it){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>*it;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::next(it)<sp/>!=<sp/>lst.end()){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_node" kindref="compound">Node</ref>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="25" refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" kindref="member">Node</ref>*<sp/><ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="26" refid="struct_node_1a4f50b730e5a2a73ecfb42699e3937d17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" kindref="member">Node</ref>*<sp/><ref refid="struct_node_1a4f50b730e5a2a73ecfb42699e3937d17" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="struct_node_1a0692b16d246460bf94c18d49592facdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1a0692b16d246460bf94c18d49592facdd" kindref="member">Node</ref>(T<sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data<sp/>=<sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node_1a4f50b730e5a2a73ecfb42699e3937d17" kindref="member">prev</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="struct_node_1abe0b87fcd2f8f1668680ae7f86f94bfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1abe0b87fcd2f8f1668680ae7f86f94bfc" kindref="member">Node</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data<sp/>=<sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node_1a4f50b730e5a2a73ecfb42699e3937d17" kindref="member">prev</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_linked_list" kindref="compound">LinkedList</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_linked_list_8h_1a08ab48c8a731571a66b1849dcc9ee7d6" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_linked_list" kindref="compound">LinkedList&lt;T&gt;</ref>&amp;<sp/>container);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="48" refid="class_linked_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_linked_list_1a3c20fcfec867e867f541061a09fc640c" kindref="member">LinkedList</ref>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>front;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>back;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="class_linked_list_1a3c20fcfec867e867f541061a09fc640c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1a3c20fcfec867e867f541061a09fc640c" kindref="member">LinkedList</ref>(){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_linked_list_1a2e6c246781e458f803203e9c75c6aa90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1a2e6c246781e458f803203e9c75c6aa90" kindref="member">LinkedList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1a3c20fcfec867e867f541061a09fc640c" kindref="member">LinkedList&lt;T&gt;</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>back<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>current<sp/>=<sp/>other.front;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1afecdb04d978c0206287d8cf88d4e5912" kindref="member">appendinLL</ref>(current-&gt;<ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>each<sp/>node&apos;s<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_linked_list_1_1_iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_linked_list_1_1_iterator_1ae772ed8a3fe633ea021c0851ffd0ef1d" kindref="member">Iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>current;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="71" refid="class_linked_list_1_1_iterator_1ae772ed8a3fe633ea021c0851ffd0ef1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1_1_iterator_1ae772ed8a3fe633ea021c0851ffd0ef1d" kindref="member">Iterator</ref>(<ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>node)<sp/>:<sp/>current(node)<sp/>{}</highlight></codeline>
<codeline lineno="72" refid="class_linked_list_1_1_iterator_1a3bddc0d07e273fbb04fa22b7feb3faf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/><ref refid="class_linked_list_1_1_iterator_1a3bddc0d07e273fbb04fa22b7feb3faf4" kindref="member">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current-&gt;data;<sp/>}</highlight></codeline>
<codeline lineno="73" refid="class_linked_list_1_1_iterator_1ab71c0df5efc97a4a8ffa8866723e662b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1_1_iterator_1ae772ed8a3fe633ea021c0851ffd0ef1d" kindref="member">Iterator</ref>&amp;<sp/><ref refid="class_linked_list_1_1_iterator_1ab71c0df5efc97a4a8ffa8866723e662b" kindref="member">operator++</ref>()<sp/>{<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current)<sp/>current<sp/>=<sp/>current-&gt;next;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77" refid="class_linked_list_1_1_iterator_1a8f198f199bcec5ac69f39cd539000c0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1_1_iterator_1a8f198f199bcec5ac69f39cd539000c0e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1_1_iterator_1ae772ed8a3fe633ea021c0851ffd0ef1d" kindref="member">Iterator</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current<sp/>!=<sp/>other.current;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_linked_list_1a417e93e223b5e9f5a511cee4c56ac338" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_linked_list_1a417e93e223b5e9f5a511cee4c56ac338" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1_1_iterator" kindref="compound">Iterator</ref>(front);<sp/>}</highlight></codeline>
<codeline lineno="81" refid="class_linked_list_1abd13f8fef21c6b9a594a36e31d0f79ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_linked_list_1abd13f8fef21c6b9a594a36e31d0f79ad" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//learn<sp/>Iterator<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//method<sp/>that<sp/>adds<sp/>a<sp/>node<sp/>to<sp/>a<sp/>linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="class_linked_list_1afecdb04d978c0206287d8cf88d4e5912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1afecdb04d978c0206287d8cf88d4e5912" kindref="member">appendinLL</ref>(T<sp/>val){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(front<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>=<sp/>front;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>temp<sp/>=<sp/>front;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>-&gt;<ref refid="struct_node_1a4f50b730e5a2a73ecfb42699e3937d17" kindref="member">prev</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>=<sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="class_linked_list_1a455066651ebdb60a153f39a2e92111bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1a455066651ebdb60a153f39a2e92111bc" kindref="member">appendinLL</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(front<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>=<sp/>front;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>temp<sp/>=<sp/>front;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>(val);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>-&gt;<ref refid="struct_node_1a4f50b730e5a2a73ecfb42699e3937d17" kindref="member">prev</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>=<sp/>temp-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="class_linked_list_1a7c37609df3b83bc4eb0281b852f93fd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_linked_list_1a7c37609df3b83bc4eb0281b852f93fd7" kindref="member">~LinkedList</ref>(){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>current<sp/>=<sp/>front;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>next<sp/>=<sp/>current-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>front<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>&lt;&gt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_linked_list" kindref="compound">LinkedList&lt;T&gt;</ref>&amp;<sp/>list);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="133" refid="class_linked_list_1a1fcb68f3522aaf1a95fcd2c716c2727a" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_linked_list_8h_1a08ab48c8a731571a66b1849dcc9ee7d6" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_linked_list_1a3c20fcfec867e867f541061a09fc640c" kindref="member">LinkedList&lt;T&gt;</ref>&amp;<sp/>list){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>current<sp/>=<sp/>list.front;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>current-&gt;<ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="struct_node_1ac1c0563946c59c36bddde431b4adb00b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
    </programlisting>
    <location file="LinkedList.h"/>
  </compounddef>
</doxygen>
