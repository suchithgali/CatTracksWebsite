<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_binary_tree_8h" kind="file" language="C++">
    <compoundname>BinaryTree.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">ostream</includes>
    <includes refid="_array_list_8h" local="yes">ArrayList.h</includes>
    <incdepgraph>
      <node id="4">
        <label>ArrayList.h</label>
        <link refid="_array_list_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>BinaryTree.h</label>
        <link refid="_binary_tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>LinkedList.h</label>
        <link refid="_linked_list_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>initializer_list</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>list</label>
      </node>
      <node id="3">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_node" prot="public">Node</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_node" kindref="compound">Node</ref>&lt; T &gt; *</type>
        <definition>Node&lt; T &gt; * sorted_BST</definition>
        <argsstring>(ArrayList&lt; T &gt; &amp;list, int start, int end)</argsstring>
        <name>sorted_BST</name>
        <param>
          <type><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt; T &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BinaryTree.h" line="22" column="6" bodyfile="BinaryTree.h" bodystart="22" bodyend="31"/>
        <references refid="struct_node_1a6596c7ac17ecafff5522310c0da3a828" compoundref="_binary_tree_8h" startline="11">Node&lt; T &gt;::left</references>
        <references refid="struct_node_1a4009a1138f2f04372037fbec63406f11" compoundref="_binary_tree_8h" startline="12">Node&lt; T &gt;::right</references>
        <references refid="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" compoundref="_binary_tree_8h" startline="22" endline="31">sorted_BST</references>
        <referencedby refid="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" compoundref="_binary_tree_8h" startline="22" endline="31">sorted_BST</referencedby>
      </memberdef>
      <memberdef kind="function" id="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print_tree</definition>
        <argsstring>(Node&lt; T &gt; *root, std::string indent=&quot;&quot;, bool last=true)</argsstring>
        <name>print_tree</name>
        <param>
          <type><ref refid="struct_node" kindref="compound">Node</ref>&lt; T &gt; *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>indent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>last</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BinaryTree.h" line="35" column="6" bodyfile="BinaryTree.h" bodystart="35" bodyend="48"/>
        <references refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" compoundref="_binary_tree_8h" startline="10">Node&lt; T &gt;::data</references>
        <references refid="struct_node_1a6596c7ac17ecafff5522310c0da3a828" compoundref="_binary_tree_8h" startline="11">Node&lt; T &gt;::left</references>
        <references refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" compoundref="_binary_tree_8h" startline="35" endline="48">print_tree</references>
        <references refid="struct_node_1a4009a1138f2f04372037fbec63406f11" compoundref="_binary_tree_8h" startline="12">Node&lt; T &gt;::right</references>
        <referencedby refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" compoundref="_binary_tree_8h" startline="35" endline="48">print_tree</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>BINARY_TREE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_TREE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_array_list_8h" kindref="compound">ArrayList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9" refid="struct_node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" kindref="member">Node</ref>{</highlight></codeline>
<codeline lineno="10" refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="11" refid="struct_node_1a6596c7ac17ecafff5522310c0da3a828" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" kindref="member">Node</ref>*<sp/><ref refid="struct_node_1a6596c7ac17ecafff5522310c0da3a828" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="12" refid="struct_node_1a4009a1138f2f04372037fbec63406f11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" kindref="member">Node</ref>*<sp/><ref refid="struct_node_1a4009a1138f2f04372037fbec63406f11" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node_1a2fa6968303ac7486cd1cbbadb793859b" kindref="member">Node</ref>(T<sp/>val){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//creates<sp/>a<sp/>Binary<sp/>Search<sp/>Tree<sp/>using<sp/>a<sp/>sorted<sp/>ArrayList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22" refid="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" refkind="member"><highlight class="normal"><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/><ref refid="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" kindref="member">sorted_BST</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;T&gt;</ref>&amp;<sp/>list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>(list[mid]);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="struct_node_1a6596c7ac17ecafff5522310c0da3a828" kindref="member">left</ref><sp/>=<sp/><ref refid="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" kindref="member">sorted_BST</ref>(list,<sp/>start,<sp/>mid<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="struct_node_1a4009a1138f2f04372037fbec63406f11" kindref="member">right</ref><sp/>=<sp/><ref refid="_binary_tree_8h_1a3d6d6401e490c4477d568c2f28072327" kindref="member">sorted_BST</ref>(list,<sp/>mid<sp/>+<sp/>1,<sp/>end);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>binary<sp/>tree<sp/>in<sp/>a<sp/>pretty<sp/>way<sp/>with<sp/>branches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="35" refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" kindref="member">print_tree</ref>(<ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>root,<sp/>std::string<sp/>indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>indent;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;└──<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;├──<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;│<sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>root-&gt;<ref refid="struct_node_1ac450c71a8677a38d306361f9ced518d3" kindref="member">data</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" kindref="member">print_tree</ref>(root-&gt;<ref refid="struct_node_1a6596c7ac17ecafff5522310c0da3a828" kindref="member">left</ref>,<sp/>indent,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" kindref="member">print_tree</ref>(root-&gt;<ref refid="struct_node_1a4009a1138f2f04372037fbec63406f11" kindref="member">right</ref>,<sp/>indent,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_binary_tree_8h_1afaf0762fd71cfb9a550a9086efcf8985" kindref="member">print_tree</ref>(<ref refid="struct_node" kindref="compound">Node&lt;T&gt;</ref>*<sp/>root,<sp/>std::string<sp/>indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="BinaryTree.h"/>
  </compounddef>
</doxygen>
