<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="brain_8cpp" kind="file" language="C++">
    <compoundname>brain.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">ctime</includes>
    <includes local="no">vector</includes>
    <includes refid="stops__data_8h" local="yes">stops_data.h</includes>
    <includes refid="_array_list_8h" local="yes">ArrayList.h</includes>
    <includes local="no">unordered_set</includes>
    <includes refid="_hash_table_8h" local="yes">HashTable.h</includes>
    <includes local="no">cpr/cpr.h</includes>
    <includes local="no">nlohmann/json.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>ArrayList.h</label>
        <link refid="_array_list_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>HashTable.h</label>
        <link refid="_hash_table_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>LinkedList.h</label>
        <link refid="_linked_list_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>brain.cpp</label>
        <link refid="brain_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stops_data.h</label>
        <link refid="stops__data_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>cpr/cpr.h</label>
      </node>
      <node id="4">
        <label>ctime</label>
      </node>
      <node id="8">
        <label>initializer_list</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>list</label>
      </node>
      <node id="20">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="11">
        <label>ostream</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>typeinfo</label>
      </node>
      <node id="18">
        <label>unordered_set</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" prot="public" static="no">
        <type>nlohmann::json</type>
        <definition>using json =  nlohmann::json</definition>
        <argsstring></argsstring>
        <name>json</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="13" column="1" bodyfile="brain.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd" prot="public" static="no" mutable="no">
        <type>auto</type>
        <definition>auto timeLA</definition>
        <argsstring></argsstring>
        <name>timeLA</name>
        <initializer>= std::chrono::system_clock::now()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="16" column="6" bodyfile="brain.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a8307e4bf36c4646673e073621c4f9ccf" prot="public" static="no" mutable="no">
        <type>std::time_t</type>
        <definition>std::time_t timeT</definition>
        <argsstring></argsstring>
        <name>timeT</name>
        <initializer>= std::chrono::system_clock::to_time_t(<ref refid="brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd" kindref="member">timeLA</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="18" column="13" bodyfile="brain.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool placeFound</definition>
        <argsstring></argsstring>
        <name>placeFound</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="20" column="6" bodyfile="brain.cpp" bodystart="20" bodyend="-1"/>
        <referencedby refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="brain_8cpp" startline="363" endline="436">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; nameBus(&quot;nameBus&quot;, 9)</definition>
        <argsstring>(&quot;nameBus&quot;, 9)</argsstring>
        <name>nameBus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="22" column="11"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0" compoundref="brain_8cpp" startline="81" endline="87">findBusTaken</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; possible_buses(&quot;possiblebuses&quot;, 9)</definition>
        <argsstring>(&quot;possiblebuses&quot;, 9)</argsstring>
        <name>possible_buses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="23" column="11"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a95d1dbab111395e55c015259450d66ab" compoundref="brain_8cpp" startline="350" endline="361">findShortestBus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36" prot="public" static="no" mutable="no">
        <type><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt; std::string &gt;</type>
        <definition>ArrayList&lt;std::string&gt; possible_busnames</definition>
        <argsstring></argsstring>
        <name>possible_busnames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="24" column="11" bodyfile="brain.cpp" bodystart="24" bodyend="-1"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; possible_distances(&quot;possibledistances&quot;, 9)</definition>
        <argsstring>(&quot;possibledistances&quot;, 9)</argsstring>
        <name>possible_distances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="25" column="11"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a95d1dbab111395e55c015259450d66ab" compoundref="brain_8cpp" startline="350" endline="361">findShortestBus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7" prot="public" static="no" mutable="no">
        <type><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt; std::string &gt;</type>
        <definition>ArrayList&lt;std::string&gt; shortest_stops</definition>
        <argsstring></argsstring>
        <name>shortest_stops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="26" column="11" bodyfile="brain.cpp" bodystart="26" bodyend="-1"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; busGo_stops(&quot;busGostops&quot;, 9)</definition>
        <argsstring>(&quot;busGostops&quot;, 9)</argsstring>
        <name>busGo_stops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="27" column="11"/>
        <referencedby refid="brain_8cpp_1a92439386422a137302195241eb828238" compoundref="brain_8cpp" startline="89" endline="95">busGoStops</referencedby>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a73757c103b1d5b822641a143032b3693" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; distances_dict(&quot;distancesdict&quot;, 9)</definition>
        <argsstring>(&quot;distancesdict&quot;, 9)</argsstring>
        <name>distances_dict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="28" column="11"/>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a9c3ac25e594dc612910249813aa7dced" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; shortestnames_stops(&quot;shortestnames_stops&quot;, 9)</definition>
        <argsstring>(&quot;shortestnames_stops&quot;, 9)</argsstring>
        <name>shortestnames_stops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="29" column="11"/>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a6dfb5807da3afa5d183f5c6b73a6070e" prot="public" static="no" mutable="no">
        <type><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt; std::string &gt;</type>
        <definition>ArrayList&lt;std::string&gt; distances_list</definition>
        <argsstring></argsstring>
        <name>distances_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="30" column="11" bodyfile="brain.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71" prot="public" static="no" mutable="no">
        <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt;</type>
        <definition>HashTable&lt; std::string &gt; named_stops(&quot;named_stops&quot;, 9)</definition>
        <argsstring>(&quot;named_stops&quot;, 9)</argsstring>
        <name>named_stops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="31" column="11"/>
        <referencedby refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="brain_8cpp" startline="363" endline="436">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string q1</definition>
        <argsstring></argsstring>
        <name>q1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="78" column="13" bodyfile="brain.cpp" bodystart="78" bodyend="-1"/>
        <referencedby refid="brain_8cpp_1a92439386422a137302195241eb828238" compoundref="brain_8cpp" startline="89" endline="95">busGoStops</referencedby>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" compoundref="brain_8cpp" startline="203" endline="298">findBusSimilar</referencedby>
        <referencedby refid="brain_8cpp_1a843260ff92ac53db80f16e606e63840b" compoundref="brain_8cpp" startline="174" endline="201">findbustoTake</referencedby>
        <referencedby refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="brain_8cpp" startline="363" endline="436">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string q2</definition>
        <argsstring></argsstring>
        <name>q2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="79" column="13" bodyfile="brain.cpp" bodystart="79" bodyend="-1"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" compoundref="brain_8cpp" startline="203" endline="298">findBusSimilar</referencedby>
        <referencedby refid="brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0" compoundref="brain_8cpp" startline="81" endline="87">findBusTaken</referencedby>
        <referencedby refid="brain_8cpp_1a843260ff92ac53db80f16e606e63840b" compoundref="brain_8cpp" startline="174" endline="201">findbustoTake</referencedby>
        <referencedby refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="brain_8cpp" startline="363" endline="436">main</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool validatePlace</definition>
        <argsstring>(ArrayList&lt; std::string &gt; list, std::string target, int start, int end)</argsstring>
        <name>validatePlace</name>
        <param>
          <type><ref refid="class_array_list" kindref="compound">ArrayList</ref>&lt; std::string &gt;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="34" column="6" bodyfile="brain.cpp" bodystart="34" bodyend="48"/>
        <referencedby refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="brain_8cpp" startline="363" endline="436">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Hash_binary_search</definition>
        <argsstring>(HashTable&lt; std::string &gt; &amp;table, const std::string &amp;target)</argsstring>
        <name>Hash_binary_search</name>
        <param>
          <type><ref refid="class_hash_table" kindref="compound">HashTable</ref>&lt; std::string &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="51" column="13" bodyfile="brain.cpp" bodystart="51" bodyend="76"/>
        <references refid="class_hash_table_1a334c472f741326880069131e6e250d04" compoundref="_hash_table_8h" startline="198" endline="200">HashTable&lt; T &gt;::getBuckets</references>
        <references refid="class_hash_table_1a696a2532b2a73abc2a2135e57d138906" compoundref="_hash_table_8h" startline="104" endline="106">HashTable&lt; T &gt;::getKeys</references>
        <references refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" compoundref="_array_list_8h" startline="136" endline="138">ArrayList&lt; T &gt;::getsize</references>
        <references refid="class_hash_table_1a012d6d29d5afe9756a310bdff563aa9f" compoundref="_hash_table_8h" startline="118" endline="126">HashTable&lt; T &gt;::search</references>
        <referencedby refid="brain_8cpp_1a92439386422a137302195241eb828238" compoundref="brain_8cpp" startline="89" endline="95">busGoStops</referencedby>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0" compoundref="brain_8cpp" startline="81" endline="87">findBusTaken</referencedby>
        <referencedby refid="brain_8cpp_1a95d1dbab111395e55c015259450d66ab" compoundref="brain_8cpp" startline="350" endline="361">findShortestBus</referencedby>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findBusTaken</definition>
        <argsstring>()</argsstring>
        <name>findBusTaken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="81" column="6" bodyfile="brain.cpp" bodystart="81" bodyend="87"/>
        <references refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" compoundref="stops__data_8h" startline="197" endline="197">bus_stops_tables</references>
        <references refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" compoundref="brain_8cpp" startline="51" endline="76">Hash_binary_search</references>
        <references refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</references>
        <references refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" compoundref="brain_8cpp" startline="79">q2</references>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1a92439386422a137302195241eb828238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void busGoStops</definition>
        <argsstring>()</argsstring>
        <name>busGoStops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="89" column="6" bodyfile="brain.cpp" bodystart="89" bodyend="95"/>
        <references refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" compoundref="stops__data_8h" startline="197" endline="197">bus_stops_tables</references>
        <references refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</references>
        <references refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" compoundref="brain_8cpp" startline="51" endline="76">Hash_binary_search</references>
        <references refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" compoundref="brain_8cpp" startline="78">q1</references>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float apiCalls</definition>
        <argsstring>(std::string point1, std::string point2, std::string point3)</argsstring>
        <name>apiCalls</name>
        <param>
          <type>std::string</type>
          <declname>point1</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>point2</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>point3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="97" column="7" bodyfile="brain.cpp" bodystart="97" bodyend="167"/>
        <referencedby refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" compoundref="brain_8cpp" startline="301" endline="348">findBusGo</referencedby>
        <referencedby refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" compoundref="brain_8cpp" startline="203" endline="298">findBusSimilar</referencedby>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1a843260ff92ac53db80f16e606e63840b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findbustoTake</definition>
        <argsstring>()</argsstring>
        <name>findbustoTake</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="174" column="6" bodyfile="brain.cpp" bodystart="174" bodyend="201"/>
        <references refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" compoundref="_array_list_8h" startline="119" endline="126">ArrayList&lt; T &gt;::append</references>
        <references refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" compoundref="stops__data_8h" startline="197" endline="197">bus_stops_tables</references>
        <references refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" compoundref="_array_list_8h" startline="136" endline="138">ArrayList&lt; T &gt;::getsize</references>
        <references refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" compoundref="brain_8cpp" startline="78">q1</references>
        <references refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" compoundref="brain_8cpp" startline="79">q2</references>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findBusSimilar</definition>
        <argsstring>()</argsstring>
        <name>findBusSimilar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="203" column="6" bodyfile="brain.cpp" bodystart="203" bodyend="298"/>
        <references refid="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" compoundref="brain_8cpp" startline="97" endline="167">apiCalls</references>
        <references refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" compoundref="_array_list_8h" startline="119" endline="126">ArrayList&lt; T &gt;::append</references>
        <references refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" compoundref="stops__data_8h" startline="197" endline="197">bus_stops_tables</references>
        <references refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" compoundref="stops__data_8h" startline="35" endline="40">geo_places</references>
        <references refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" compoundref="_array_list_8h" startline="136" endline="138">ArrayList&lt; T &gt;::getsize</references>
        <references refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" compoundref="stops__data_8h" startline="28" endline="34">places</references>
        <references refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" compoundref="brain_8cpp" startline="78">q1</references>
        <references refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" compoundref="brain_8cpp" startline="79">q2</references>
        <referencedby refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="brain_8cpp" startline="363" endline="436">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findBusGo</definition>
        <argsstring>()</argsstring>
        <name>findBusGo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="301" column="6" bodyfile="brain.cpp" bodystart="301" bodyend="348"/>
        <references refid="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" compoundref="brain_8cpp" startline="97" endline="167">apiCalls</references>
        <references refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" compoundref="_array_list_8h" startline="119" endline="126">ArrayList&lt; T &gt;::append</references>
        <references refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254">busGo_stops</references>
        <references refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" compoundref="stops__data_8h" startline="35" endline="40">geo_places</references>
        <references refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" compoundref="brain_8cpp" startline="51" endline="76">Hash_binary_search</references>
        <references refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c">nameBus</references>
        <references refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" compoundref="stops__data_8h" startline="28" endline="34">places</references>
        <references refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</references>
        <references refid="brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36" compoundref="brain_8cpp" startline="24">possible_busnames</references>
        <references refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">possible_distances</references>
        <references refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" compoundref="brain_8cpp" startline="78">q1</references>
        <references refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" compoundref="brain_8cpp" startline="79">q2</references>
        <references refid="brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7" compoundref="brain_8cpp" startline="26">shortest_stops</references>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1a95d1dbab111395e55c015259450d66ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findShortestBus</definition>
        <argsstring>()</argsstring>
        <name>findShortestBus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="350" column="6" bodyfile="brain.cpp" bodystart="350" bodyend="361"/>
        <references refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" compoundref="_array_list_8h" startline="119" endline="126">ArrayList&lt; T &gt;::append</references>
        <references refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" compoundref="brain_8cpp" startline="51" endline="76">Hash_binary_search</references>
        <references refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8">possible_buses</references>
        <references refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3">possible_distances</references>
      </memberdef>
      <memberdef kind="function" id="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="brain.cpp" line="363" column="5" bodyfile="brain.cpp" bodystart="363" bodyend="436"/>
        <references refid="stops__data_8h_1a38234e7466b4a71ae218866a4206a27e" compoundref="stops__data_8h" startline="42" endline="42">bus_names</references>
        <references refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" compoundref="stops__data_8h" startline="197" endline="197">bus_stops_tables</references>
        <references refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" compoundref="brain_8cpp" startline="203" endline="298">findBusSimilar</references>
        <references refid="brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71">named_stops</references>
        <references refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" compoundref="brain_8cpp" startline="20">placeFound</references>
        <references refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" compoundref="stops__data_8h" startline="28" endline="34">places</references>
        <references refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" compoundref="brain_8cpp" startline="78">q1</references>
        <references refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" compoundref="brain_8cpp" startline="79">q2</references>
        <references refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" compoundref="brain_8cpp" startline="34" endline="48">validatePlace</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stops__data_8h" kindref="compound">stops_data.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_array_list_8h" kindref="compound">ArrayList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_hash_table_8h" kindref="compound">HashTable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cpr/cpr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nlohmann/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>=<sp/>nlohmann::json;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//holds<sp/>an<sp/>object<sp/>of<sp/>type<sp/>time<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd" kindref="member">timeLA</ref><sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//coverts<sp/>the<sp/>time<sp/>object<sp/>to<sp/>a<sp/>printable<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="brain_8cpp_1a8307e4bf36c4646673e073621c4f9ccf" refkind="member"><highlight class="normal">std::time_t<sp/><ref refid="brain_8cpp_1a8307e4bf36c4646673e073621c4f9ccf" kindref="member">timeT</ref><sp/>=<sp/>std::chrono::system_clock::to_time_t(<ref refid="brain_8cpp_1ab577df0563dcb4d3ee9709a28f3567dd" kindref="member">timeLA</ref>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" kindref="member">nameBus</ref>(</highlight><highlight class="stringliteral">&quot;nameBus&quot;</highlight><highlight class="normal">,9);</highlight></codeline>
<codeline lineno="23" refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" kindref="member">possible_buses</ref>(</highlight><highlight class="stringliteral">&quot;possiblebuses&quot;</highlight><highlight class="normal">,<sp/>9);</highlight></codeline>
<codeline lineno="24" refid="brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36" refkind="member"><highlight class="normal"><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36" kindref="member">possible_busnames</ref>;</highlight></codeline>
<codeline lineno="25" refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3" kindref="member">possible_distances</ref>(</highlight><highlight class="stringliteral">&quot;possibledistances&quot;</highlight><highlight class="normal">,<sp/>9);</highlight></codeline>
<codeline lineno="26" refid="brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7" refkind="member"><highlight class="normal"><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7" kindref="member">shortest_stops</ref>;</highlight></codeline>
<codeline lineno="27" refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" kindref="member">busGo_stops</ref>(</highlight><highlight class="stringliteral">&quot;busGostops&quot;</highlight><highlight class="normal">,<sp/>9);</highlight></codeline>
<codeline lineno="28" refid="brain_8cpp_1a73757c103b1d5b822641a143032b3693" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1a73757c103b1d5b822641a143032b3693" kindref="member">distances_dict</ref>(</highlight><highlight class="stringliteral">&quot;distancesdict&quot;</highlight><highlight class="normal">,<sp/>9);</highlight></codeline>
<codeline lineno="29" refid="brain_8cpp_1a9c3ac25e594dc612910249813aa7dced" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1a9c3ac25e594dc612910249813aa7dced" kindref="member">shortestnames_stops</ref>(</highlight><highlight class="stringliteral">&quot;shortestnames_stops&quot;</highlight><highlight class="normal">,<sp/>9);</highlight></codeline>
<codeline lineno="30" refid="brain_8cpp_1a6dfb5807da3afa5d183f5c6b73a6070e" refkind="member"><highlight class="normal"><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1a6dfb5807da3afa5d183f5c6b73a6070e" kindref="member">distances_list</ref>;</highlight></codeline>
<codeline lineno="31" refid="brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71" refkind="member"><highlight class="normal"><ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref><sp/><ref refid="brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71" kindref="member">named_stops</ref>(</highlight><highlight class="stringliteral">&quot;named_stops&quot;</highlight><highlight class="normal">,<sp/>9);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" kindref="member">validatePlace</ref>(<ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>list,<sp/>std::string<sp/>target,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>middle<sp/>=<sp/>start<sp/>+<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list[middle]<sp/>==<sp/>target){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list[middle]<sp/>&gt;<sp/>target){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>middle<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>middle<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" refkind="member"><highlight class="normal">std::string<sp/><ref refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" kindref="member">Hash_binary_search</ref>(<ref refid="class_hash_table" kindref="compound">HashTable&lt;std::string&gt;</ref>&amp;<sp/>table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>target){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(table.<ref refid="class_hash_table_1a334c472f741326880069131e6e250d04" kindref="member">getBuckets</ref>()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>empty<sp/>case<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;HashTable<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ArrayList&lt;std::string&gt;<sp/>sorted_names;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//sorted_names.insertionSort(bus_names);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>table.<ref refid="class_hash_table_1a696a2532b2a73abc2a2135e57d138906" kindref="member">getKeys</ref>().<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(low<sp/>&lt;=<sp/>high){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>middle<sp/>=<sp/>(low<sp/>+<sp/>high)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>keys<sp/>=<sp/>table.<ref refid="class_hash_table_1a696a2532b2a73abc2a2135e57d138906" kindref="member">getKeys</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>value<sp/>=<sp/>keys[middle];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>target){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>middle<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>target){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>high<sp/>=<sp/>middle<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table.<ref refid="class_hash_table_1a012d6d29d5afe9756a310bdff563aa9f" kindref="member">search</ref>(value);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>;</highlight></codeline>
<codeline lineno="79" refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" refkind="member"><highlight class="normal">std::string<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1a5d44cd73410c9105427d5ffd68759fa0" kindref="member">findBusTaken</ref>(){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tables<sp/>:<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" kindref="member">Hash_binary_search</ref>(tables,<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>)<sp/>==<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" kindref="member">nameBus</ref>.appendTable(<ref refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" kindref="member">nameBus</ref>.HashStrings(<ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>),<sp/>tables.getName(),<sp/>tables);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="brain_8cpp_1a92439386422a137302195241eb828238" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1a92439386422a137302195241eb828238" kindref="member">busGoStops</ref>(){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tables<sp/>:<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" kindref="member">Hash_binary_search</ref>(tables,<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>)<sp/>==<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" kindref="member">busGo_stops</ref>.appendTable(<ref refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" kindref="member">busGo_stops</ref>.HashStrings(<ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>),<sp/>tables.getName(),<sp/>tables);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" kindref="member">apiCalls</ref>(std::string<sp/>point1,<sp/>std::string<sp/>point2,<sp/>std::string<sp/>point3){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;float&gt;&gt;<sp/>coordinates1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceMiles;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>cpr::Response<sp/>point1_call<sp/>=<sp/>cpr::Get(cpr::Url{</highlight><highlight class="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpr::Parameters{{</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>point1},<sp/>{</highlight><highlight class="stringliteral">&quot;api_key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(point1_call.status_code<sp/>!=<sp/>200){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;API<sp/>call<sp/>for<sp/>point1<sp/>failed<sp/>with<sp/>status:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(point1_call.status_code));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>jsonResponse<sp/>=<sp/>json::parse(point1_call.text);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>features<sp/>=<sp/>jsonResponse[</highlight><highlight class="stringliteral">&quot;features&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>feature<sp/>:<sp/>features){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>coords<sp/>=<sp/>feature[</highlight><highlight class="stringliteral">&quot;geometry&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lon<sp/>=<sp/>coords[0];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>coords[1];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates1.push_back({lon,<sp/>lat});</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>cpr::Response<sp/>point2_call<sp/>=<sp/>cpr::Get(cpr::Url{</highlight><highlight class="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpr::Parameters{{</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>point2},<sp/>{</highlight><highlight class="stringliteral">&quot;api_key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(point2_call.status_code<sp/>!=<sp/>200){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;API<sp/>call<sp/>for<sp/>point2<sp/>failed<sp/>with<sp/>status:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(point2_call.status_code));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>jsonResponse2<sp/>=<sp/>json::parse(point2_call.text);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>features2<sp/>=<sp/>jsonResponse2[</highlight><highlight class="stringliteral">&quot;features&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>feature<sp/>:<sp/>features2){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>coords2<sp/>=<sp/>feature[</highlight><highlight class="stringliteral">&quot;geometry&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lon<sp/>=<sp/>coords2[0];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>coords2[1];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates1.push_back({lon,<sp/>lat});</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>cpr::Response<sp/>point3_call<sp/>=<sp/>cpr::Get(cpr::Url{</highlight><highlight class="stringliteral">&quot;https://api.openrouteservice.org/geocode/search&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpr::Parameters{{</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>point3},<sp/>{</highlight><highlight class="stringliteral">&quot;api_key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(point3_call.status_code<sp/>!=<sp/>200){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;API<sp/>call<sp/>for<sp/>point3<sp/>failed<sp/>with<sp/>status:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(point3_call.status_code));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>jsonResponse3<sp/>=<sp/>json::parse(point3_call.text);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>features3<sp/>=<sp/>jsonResponse3[</highlight><highlight class="stringliteral">&quot;features&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>feature<sp/>:<sp/>features3){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>coords3<sp/>=<sp/>feature[</highlight><highlight class="stringliteral">&quot;geometry&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lon<sp/>=<sp/>coords3[0];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>coords3[1];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates1.push_back({lon,<sp/>lat});</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>requestBody;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>requestBody[</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">]<sp/>=<sp/>coordinates1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>requestBody.dump(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>cpr::Response<sp/>firstSegment<sp/>=<sp/>cpr::Post(cpr::Url{</highlight><highlight class="stringliteral">&quot;https://api.openrouteservice.org/v2/directions/driving-car&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpr::Header{{</highlight><highlight class="stringliteral">&quot;Authorization&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5b3ce3597851110001cf6248e4dacfb3ab0a4b1d83a0511ffdd542f3&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;Content-Type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;application/json&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpr::Body{requestBody.dump()}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstSegment.status_code<sp/>!=<sp/>200){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;API<sp/>call<sp/>for<sp/>point4<sp/>failed<sp/>with<sp/>status:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(firstSegment.status_code));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>jsonResponse4<sp/>=<sp/>json::parse(firstSegment.text);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref><sp/>features4<sp/>=<sp/>jsonResponse4[</highlight><highlight class="stringliteral">&quot;routes&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>feature<sp/>:<sp/>features4){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceMeters<sp/>=<sp/>feature[</highlight><highlight class="stringliteral">&quot;summary&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">].get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>distanceMiles<sp/>=<sp/>distanceMeters<sp/>/<sp/>1609;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distanceMiles;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//need<sp/>to<sp/>search<sp/>for<sp/>q1<sp/>in<sp/>all<sp/>the<sp/>bus<sp/>hashtables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//save<sp/>the<sp/>names<sp/>of<sp/>all<sp/>the<sp/>buses<sp/>in<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//check<sp/>if<sp/>q2<sp/>is<sp/>in<sp/>any<sp/>of<sp/>the<sp/>buses<sp/>that<sp/>were<sp/>saved<sp/>in<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//if<sp/>it<sp/>is<sp/>return<sp/>that<sp/>the<sp/>user<sp/>should<sp/>take<sp/>any<sp/>of<sp/>those<sp/>buses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="brain_8cpp_1a843260ff92ac53db80f16e606e63840b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1a843260ff92ac53db80f16e606e63840b" kindref="member">findbustoTake</ref>(){</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;HashTable&lt;std::string&gt;</ref>&gt;<sp/>q1Buses;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;HashTable&lt;std::string&gt;</ref>&gt;<sp/>commonBuses;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>.getsize();<sp/>i++){</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>route<sp/>:<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>[i].getKeys()){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(route<sp/>==<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q1Buses.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(<ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>[i]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q1Buses.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>j++){</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>route2<sp/>:<sp/>q1Buses[j].getKeys()){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(route2<sp/>==<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonBuses.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(q1Buses[j]);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;To<sp/>go<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>take<sp/>any<sp/>of<sp/>these<sp/>buses:<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>commonBuses.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>i++){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>commonBuses[i].getName();<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" kindref="member">findBusSimilar</ref>(){</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;HashTable&lt;std::string&gt;</ref>&gt;<sp/>q1Buses;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;HashTable&lt;std::string&gt;</ref>&gt;<sp/>q2Buses;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>commonBuses;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>commonQ2Buses;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>std::unordered_set&lt;int&gt;<sp/>commonQ2BusIndices;<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;float&gt;</ref><sp/>distances;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>commonStops;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;--<sp/>Added<sp/>to<sp/>store<sp/>matching<sp/>stop<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::unordered_set&lt;std::string&gt;<sp/>visitedStops;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>std::string<sp/>geoQ1<sp/>=<sp/><ref refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" kindref="member">geo_places</ref>[<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.index(<ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>)];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>std::string<sp/>geoQ2<sp/>=<sp/><ref refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" kindref="member">geo_places</ref>[<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.index(<ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>)];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Single<sp/>loop<sp/>to<sp/>collect<sp/>q1<sp/>and<sp/>q2<sp/>buses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>.getsize();<sp/>i++){</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addQ1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addQ2<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keys<sp/>=<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>[i].getKeys();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>route<sp/>:<sp/>keys){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(route<sp/>==<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>){</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addQ1<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(route<sp/>==<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>){</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addQ2<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addQ1<sp/>&amp;&amp;<sp/>addQ2){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addQ1){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q1Buses.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(<ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>[i]);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addQ2){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q2Buses.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(<ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>[i]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>all<sp/>stops<sp/>from<sp/>q2Buses<sp/>into<sp/>an<sp/>unordered_set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>std::unordered_set&lt;std::string&gt;<sp/>q2AllStops;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>q2Buses.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>l++){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gostop<sp/>:<sp/>q2Buses[l].getKeys()){</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q2AllStops.insert(gostop);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>iterate<sp/>over<sp/>q1Buses<sp/>and<sp/>check<sp/>membership<sp/>in<sp/>q2AllStops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>q1Buses.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>k++){</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stops<sp/>=<sp/>q1Buses[k].getKeys();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>stop<sp/>:<sp/>stops){</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visitedStops.find(stop)<sp/>!=<sp/>visitedStops.end())<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visitedStops.insert(stop);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>stop<sp/>exists<sp/>in<sp/>q2AllStops,<sp/>record<sp/>it<sp/>along<sp/>with<sp/>the<sp/>corresponding<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q2AllStops.find(stop)<sp/>!=<sp/>q2AllStops.end()){</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(<ref refid="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" kindref="member">apiCalls</ref>(geoQ1,<sp/><ref refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" kindref="member">geo_places</ref>[<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.index(stop)],<sp/>geoQ2));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonBuses.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(q1Buses[k].getName());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonStops.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(stop);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;--<sp/>Record<sp/>the<sp/>common<sp/>stop<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q2Buses.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>j++){</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q2Keys<sp/>=<sp/>q2Buses[j].getKeys();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>current<sp/>q2<sp/>bus<sp/>has<sp/>the<sp/>common<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(q2Keys.begin(),<sp/>q2Keys.end(),<sp/>stop)<sp/>!=<sp/>q2Keys.end()){</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>add<sp/>the<sp/>bus<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commonQ2BusIndices.find(j)<sp/>==<sp/>commonQ2BusIndices.end()){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonQ2Buses.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(q2Buses[j].getName());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonQ2BusIndices.insert(j);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;To<sp/>go<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>take<sp/>any<sp/>of<sp/>these<sp/>buses:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonQ2Buses<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distances.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>()<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minDistance<sp/>=<sp/>distances[0];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>distances.<ref refid="class_array_list_1a063667aea4d7d7c5967608d3c9e7d475" kindref="member">getsize</ref>();<sp/>j++){</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distances[j]<sp/>&lt;<sp/>minDistance){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance<sp/>=<sp/>distances[j];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minIndex<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>minBus<sp/>=<sp/>commonBuses[minIndex];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>minStop<sp/>=<sp/>commonStops[minIndex];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>minStop<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>then<sp/>take<sp/>any<sp/>of<sp/>these<sp/>buses:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>commonBuses<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1a29b369f1fea7a4921c4248610e67935b" kindref="member">findBusGo</ref>(){</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>std::string<sp/>point1_name;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::string<sp/>point2_name;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>std::string<sp/>point3_name;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>std::string<sp/>takenBusStop;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entered\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>name<sp/>:<sp/><ref refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" kindref="member">nameBus</ref>.getKeys()){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buses<sp/>=<sp/><ref refid="brain_8cpp_1a8c2a0ffacbd0c93f7fc43bca4191783c" kindref="member">nameBus</ref>.getValues(name);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bus<sp/>:<sp/>buses){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entered\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>stops<sp/>:<sp/>bus.getKeys()){</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entered<sp/>third<sp/>for:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stops<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>takenBusStop<sp/>=<sp/>stops;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>name1<sp/>:<sp/><ref refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" kindref="member">busGo_stops</ref>.getKeys()){</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entered<sp/>fourth<sp/>for:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buses2<sp/>=<sp/><ref refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" kindref="member">busGo_stops</ref>.getValues(name1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>buses2<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>buses2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bus2<sp/>:<sp/>buses2){</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entered<sp/>fifth<sp/>for\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>j3<sp/>:<sp/>bus2.getKeys()){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Checking<sp/>j3:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" kindref="member">Hash_binary_search</ref>(<ref refid="brain_8cpp_1af72008cbffd556230fb9d77e2f83e254" kindref="member">busGo_stops</ref>,<sp/>takenBusStop)<sp/>==<sp/>j3){</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point1_name<sp/>=<sp/><ref refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" kindref="member">geo_places</ref>[<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.index(<ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>)];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point2_name<sp/>=<sp/><ref refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" kindref="member">geo_places</ref>[<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.index(<ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>)];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point3_name<sp/>=<sp/><ref refid="stops__data_8h_1a4c22547765214fa7ca3842fadd2459fc" kindref="member">geo_places</ref>[<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.index(takenBusStop)];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>possible_distancesKeys;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>possible_distancesKeys.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(j3);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3" kindref="member">possible_distances</ref>.appendHashes(possible_distancesKeys,<sp/><ref refid="brain_8cpp_1aef79fcf6e4eb190dcc020f8169e20ba4" kindref="member">apiCalls</ref>(point1_name,<sp/>point2_name,<sp/>point3_name));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1a277a2025c642d7b5f76f570d44a5ca36" kindref="member">possible_busnames</ref>.append(name);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1aa3acd787e5bf31113b5fa9a4795074a7" kindref="member">shortest_stops</ref>.append(j3);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" kindref="member">possible_buses</ref>.appendHashes(j3,<sp/>name1);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="brain_8cpp_1a95d1dbab111395e55c015259450d66ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1a95d1dbab111395e55c015259450d66ab" kindref="member">findShortestBus</ref>(){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_distance<sp/>=<sp/><ref refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3" kindref="member">possible_distances</ref>.getMinValue();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>std::string<sp/>min_stop<sp/>=<sp/><ref refid="brain_8cpp_1aa3dd0e407a95f84a0f7eaf824f5aecf3" kindref="member">possible_distances</ref>.searchforKey(min_distance);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>stop<sp/>:<sp/><ref refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" kindref="member">possible_buses</ref>.getKeys()){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_array_list" kindref="compound">ArrayList&lt;std::string&gt;</ref><sp/>min_bus;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1af4da574d6416dbfb33b8446fbe6d9fac" kindref="member">Hash_binary_search</ref>(<ref refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" kindref="member">possible_buses</ref>,<sp/>min_stop)<sp/>==<sp/>stop){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_bus.<ref refid="class_array_list_1a4b4d6ec48045b7056f73db5dfa9f2b66" kindref="member">append</ref>(<ref refid="brain_8cpp_1ac165ad729812177b76b15cb5f8a73cb8" kindref="member">possible_buses</ref>.search(stop));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="brain_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>(){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Where<sp/>would<sp/>you<sp/>like<sp/>to<sp/>go?<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>std::getline(std::cin,<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>=<sp/><ref refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" kindref="member">validatePlace</ref>(<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>,<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>,<sp/>0,<sp/><ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.getsize()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>location&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Where<sp/>would<sp/>you<sp/>like<sp/>to<sp/>go?:<sp/>R<sp/>Street<sp/>Village<sp/>Apts,<sp/>El<sp/>Redondo<sp/>Dr,<sp/>Compass<sp/>Pointe<sp/>Apts,<sp/>Merced<sp/>College<sp/>The<sp/>Bus<sp/>Terminal,<sp/>M<sp/>St.<sp/>At<sp/>Bellevue<sp/>RD,<sp/>University<sp/>Transit<sp/>Center,<sp/>Promenade<sp/>Center,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Merced<sp/>Mall<sp/>Target,<sp/>Walmart<sp/>on<sp/>Loughborough<sp/>Dr,<sp/>Amtrak<sp/>Station,<sp/>K<sp/>St.<sp/>Between<sp/>18th<sp/>&amp;<sp/>19th,<sp/>Merced<sp/>Transpo<sp/>(REQ),<sp/>Rite<sp/>Aid/Walgreens<sp/>on<sp/>G<sp/>St,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;El<sp/>Portal<sp/>Plaza<sp/>&amp;<sp/>G<sp/>Street,<sp/>Granville<sp/>Apartments,<sp/>G<sp/>St.<sp/>&amp;<sp/>W.<sp/>Alexander<sp/>Ave,<sp/>El<sp/>Portal<sp/>&amp;<sp/>G<sp/>Street,<sp/>Mercy<sp/>Hospital/TriCollege,<sp/>TriCollege/Mercy<sp/>(Bus<sp/>stop<sp/>on<sp/>G<sp/>next<sp/>to<sp/>Tri<sp/>College),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;G<sp/>St.<sp/>&amp;<sp/>W.<sp/>Alexander<sp/>Ave.<sp/>(Bus<sp/>Stop<sp/>Paul&apos;s<sp/>Place),<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>M<sp/>Street<sp/>(North),<sp/>Foothill<sp/>Drive,<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>M<sp/>Street<sp/>(South),<sp/>G<sp/>Street<sp/>South<sp/>Across<sp/>from<sp/>Raley&apos;s<sp/>(The<sp/>Bus<sp/>Stop),&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K<sp/>St.<sp/>Between<sp/>18Th<sp/>&amp;<sp/>19th,<sp/>Meadows<sp/>Ave<sp/>&amp;<sp/>Olivewood<sp/>Dr<sp/>(Foodmaxx),<sp/>Yosemite<sp/>Crossings<sp/>Shopping<sp/>Center,<sp/>M<sp/>Street<sp/>Village<sp/>Apartments,<sp/>Ironstone<sp/>Dr.<sp/>&amp;<sp/>M<sp/>St,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Yosemite<sp/>&amp;<sp/>Cordova<sp/>(Merced<sp/>Physician<sp/>Center),<sp/>Moraga<sp/>Subdivision,<sp/>University<sp/>Surgery<sp/>Center,<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>&apos;M&apos;<sp/>Street,<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>&apos;M&apos;<sp/>Street,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K<sp/>St.<sp/>Between<sp/>18th<sp/>&amp;<sp/>19th,<sp/>UC<sp/>Merced<sp/>Downtown<sp/>Campus<sp/>Center,<sp/>Merced<sp/>Transpo,<sp/>G<sp/>Street<sp/>South&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>std::getline(std::cin,<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>=<sp/><ref refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" kindref="member">validatePlace</ref>(<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>,<sp/><ref refid="brain_8cpp_1a8c5d59952a4de79eddbff030bf4eea7e" kindref="member">q1</ref>,<sp/>0,<sp/><ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.getsize()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">/*def<sp/>validateTime(input_time):</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/>global<sp/>valid_time</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/>try:</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsed_time<sp/>=<sp/>datetime.strptime(input_time,<sp/>&apos;%H:%M:%S&apos;)</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>0<sp/>&lt;=<sp/>parsed_time.hour<sp/>&lt;<sp/>24<sp/>and<sp/>0<sp/>&lt;=<sp/>parsed_time.minute<sp/>&lt;<sp/>60<sp/>and<sp/>0<sp/>&lt;=<sp/>parsed_time.second<sp/>&lt;<sp/>60:</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_time<sp/>=<sp/>True</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_time<sp/>=<sp/>False</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/>except<sp/>ValueError:</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_time<sp/>=<sp/>False</highlight></codeline>
<codeline lineno="392"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Where<sp/>are<sp/>you<sp/>currently<sp/>located?:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">std::getline(std::cin,<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>=<sp/><ref refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" kindref="member">validatePlace</ref>(<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>,<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>,<sp/>0,<sp/><ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.getsize()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>location&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Where<sp/>would<sp/>you<sp/>like<sp/>to<sp/>go?:<sp/>R<sp/>Street<sp/>Village<sp/>Apts,<sp/>El<sp/>Redondo<sp/>Dr,<sp/>Compass<sp/>Pointe<sp/>Apts,<sp/>Merced<sp/>College<sp/>The<sp/>Bus<sp/>Terminal,<sp/>M<sp/>St.<sp/>At<sp/>Bellevue<sp/>RD,<sp/>University<sp/>Transit<sp/>Center,<sp/>Promenade<sp/>Center,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Merced<sp/>Mall<sp/>Target,<sp/>Walmart<sp/>on<sp/>Loughborough<sp/>Dr,<sp/>Amtrak<sp/>Station,<sp/>K<sp/>St.<sp/>Between<sp/>18th<sp/>&amp;<sp/>19th,<sp/>Merced<sp/>Transpo<sp/>(REQ),<sp/>Rite<sp/>Aid/Walgreens<sp/>on<sp/>G<sp/>St,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;El<sp/>Portal<sp/>Plaza<sp/>&amp;<sp/>G<sp/>Street,<sp/>Granville<sp/>Apartments,<sp/>G<sp/>St.<sp/>&amp;<sp/>W.<sp/>Alexander<sp/>Ave,<sp/>El<sp/>Portal<sp/>&amp;<sp/>G<sp/>Street,<sp/>Mercy<sp/>Hospital/TriCollege,<sp/>TriCollege/Mercy<sp/>(Bus<sp/>stop<sp/>on<sp/>G<sp/>next<sp/>to<sp/>Tri<sp/>College),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;G<sp/>St.<sp/>&amp;<sp/>W.<sp/>Alexander<sp/>Ave.<sp/>(Bus<sp/>Stop<sp/>Paul&apos;s<sp/>Place),<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>M<sp/>Street<sp/>(North),<sp/>Foothill<sp/>Drive,<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>M<sp/>Street<sp/>(South),<sp/>G<sp/>Street<sp/>South<sp/>Across<sp/>from<sp/>Raley&apos;s<sp/>(The<sp/>Bus<sp/>Stop),&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K<sp/>St.<sp/>Between<sp/>18Th<sp/>&amp;<sp/>19th,<sp/>Meadows<sp/>Ave<sp/>&amp;<sp/>Olivewood<sp/>Dr<sp/>(Foodmaxx),<sp/>Yosemite<sp/>Crossings<sp/>Shopping<sp/>Center,<sp/>M<sp/>Street<sp/>Village<sp/>Apartments,<sp/>Ironstone<sp/>Dr.<sp/>&amp;<sp/>M<sp/>St,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Yosemite<sp/>&amp;<sp/>Cordova<sp/>(Merced<sp/>Physician<sp/>Center),<sp/>Moraga<sp/>Subdivision,<sp/>University<sp/>Surgery<sp/>Center,<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>&apos;M&apos;<sp/>Street,<sp/>Cardella<sp/>Rd.<sp/>&amp;<sp/>&apos;M&apos;<sp/>Street,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K<sp/>St.<sp/>Between<sp/>18th<sp/>&amp;<sp/>19th,<sp/>UC<sp/>Merced<sp/>Downtown<sp/>Campus<sp/>Center,<sp/>Merced<sp/>Transpo,<sp/>G<sp/>Street<sp/>South&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(std::cin,<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="brain_8cpp_1abe5aba224ff7194dca28f5ef13a40065" kindref="member">placeFound</ref><sp/>=<sp/><ref refid="brain_8cpp_1aaca0d28c24e42cd61684a8f04f85fd3f" kindref="member">validatePlace</ref>(<ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>,<sp/><ref refid="brain_8cpp_1a15be4073443715e1c258b9b1ebb6c406" kindref="member">q2</ref>,<sp/>0,<sp/><ref refid="stops__data_8h_1a3bfd9f4dcc904c5ff02862525ed0407f" kindref="member">places</ref>.getsize()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="stops__data_8h_1a38234e7466b4a71ae218866a4206a27e" kindref="member">bus_names</ref>.getsize();<sp/>i++){</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="brain_8cpp_1a3cc2b4960bb7b12dda7f62be65a3da71" kindref="member">named_stops</ref>.appendHashes(<ref refid="stops__data_8h_1a38234e7466b4a71ae218866a4206a27e" kindref="member">bus_names</ref>,<sp/><ref refid="stops__data_8h_1aae2c5b1816762d0de71d53a675e45aea" kindref="member">bus_stops_tables</ref>[i]);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="419"><highlight class="comment">q3<sp/>=<sp/>input(&quot;What<sp/>timeEl<sp/><sp/>would<sp/>you<sp/>like<sp/>to<sp/>arrive<sp/>by?<sp/>Enter<sp/>a<sp/>time<sp/>(Hour:Minute:Second<sp/>format):<sp/>&quot;)</highlight></codeline>
<codeline lineno="420"><highlight class="comment">validateTime(q3)</highlight></codeline>
<codeline lineno="421"><highlight class="comment">while<sp/>True:</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(valid_time<sp/>==<sp/>False):</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q3<sp/>=<sp/>input(&quot;What<sp/>time<sp/>would<sp/>you<sp/>like<sp/>to<sp/>arrive<sp/>by?<sp/>Enter<sp/>a<sp/>time<sp/>(Hour:Minute:Second<sp/>format)&quot;)</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validateTime(q3)</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight></codeline>
<codeline lineno="427"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="brain_8cpp_1a4a8de83f900529830fe73b019e7a0633" kindref="member">findBusSimilar</ref>();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//findbustoTake();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//busGoStops();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//findBusGo();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//findShortestBus();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>busGo_stops.getKeys()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="brain.cpp"/>
  </compounddef>
</doxygen>
